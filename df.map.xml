<data-definition>
    <struct-type type-name='coord2d' custom-methods='true' comment='not a real structure'>
        <int16_t name='x' init-value='-30000'/>
        <int16_t name='y' init-value='-30000'/>

        <custom-methods>
            <cmethod name='isValid'/>
            <cmethod name='clear'/>
        </custom-methods>

        <code-helper name='describe'>(fmt "(~A,~A)" $.x $.y)</code-helper>
    </struct-type>

    <struct-type type-name='coord2d_path' custom-methods='true' comment='not a real structure'>
        <stl-vector type-name='int16_t' name='x'/>
        <stl-vector type-name='int16_t' name='y'/>

        <custom-methods>
            <cmethod name='size'/>
            <cmethod name='erase'/>
        </custom-methods>
        <code-helper name='describe'>
            (fmt "[~A]" $.x.count)
            (loop for i from 0 below (min $.x.count 3)
              collect (fmt "(~A,~A)" $.x[i] $.y[i]))
            (when (> $.x.count 3) "...")
        </code-helper>
    </struct-type>

    <struct-type type-name='coord' custom-methods='true' comment='not a real structure'>
        <int16_t name='x' init-value='-30000'/>
        <int16_t name='y' init-value='-30000'/>
        <int16_t name='z' init-value='-30000'/>

        <extra-include type-name='coord2d'/>
        <custom-methods>
            <cmethod name='isValid'/>
            <cmethod name='clear'/>
        </custom-methods>

        <code-helper name='describe'>(fmt "(~A,~A,~A)" $.x $.y $.z)</code-helper>
    </struct-type>

    <struct-type type-name='coord_path' custom-methods='true' comment='not a real structure'>
        <stl-vector type-name='int16_t' name='x'/>
        <stl-vector type-name='int16_t' name='y'/>
        <stl-vector type-name='int16_t' name='z'/>

        <custom-methods>
            <cmethod name='empty'/>
            <cmethod name='size'/>
            <cmethod name='clear'/>
            <cmethod name='erase'/>
        </custom-methods>

        <code-helper name='describe'>
            (fmt "[~A]" $.x.count)
            (loop for i from 0 below (min $.x.count 3)
              collect (fmt "(~A,~A,~A)" $.x[i] $.y[i] $.z[i]))
            (when (> $.x.count 3) "...")
        </code-helper>
    </struct-type>

    <enum-type type-name='layer_type' base-type='int16_t'>
        <enum-item name='Surface' value='-1'/>
        <enum-item name='Cavern1'/>
        <enum-item name='Cavern2'/>
        <enum-item name='Cavern3'/>
        <enum-item name='MagmaSea'/>
        <enum-item name='Underworld'/>
    </enum-type>

</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
