<data-definition>
    <struct-type type-name='coord2d' custom-methods='true' comment='not a real structure'>
        <int16_t name='x' init-value='-30000'/>
        <int16_t name='y' init-value='-30000'/>

        <custom-methods>
            <cmethod name='isValid'/>
            <cmethod name='clear'/>
        </custom-methods>

        <code-helper name='describe'>(fmt "(~A,~A)" $.x $.y)</code-helper>
    </struct-type>

    <struct-type type-name='coord2d_path' custom-methods='true' comment='not a real structure'>
        <stl-vector type-name='int16_t' name='x'/>
        <stl-vector type-name='int16_t' name='y'/>

        <custom-methods>
            <cmethod name='size'/>
            <cmethod name='erase'/>
        </custom-methods>
        <code-helper name='describe'>
            (fmt "[~A]" $.x.count)
            (loop for i from 0 below (min $.x.count 3)
              collect (fmt "(~A,~A)" $.x[i] $.y[i]))
            (when (> $.x.count 3) "...")
        </code-helper>
    </struct-type>

    <struct-type type-name='coord' custom-methods='true' comment='not a real structure'>
        <int16_t name='x' init-value='-30000'/>
        <int16_t name='y' init-value='-30000'/>
        <int16_t name='z' init-value='-30000'/>

        <extra-include type-name='coord2d'/>
        <custom-methods>
            <cmethod name='isValid'/>
            <cmethod name='clear'/>
        </custom-methods>

        <code-helper name='describe'>(fmt "(~A,~A,~A)" $.x $.y $.z)</code-helper>
    </struct-type>

    <struct-type type-name='coord_path' custom-methods='true' comment='not a real structure'>
        <stl-vector type-name='int16_t' name='x'/>
        <stl-vector type-name='int16_t' name='y'/>
        <stl-vector type-name='int16_t' name='z'/>

        <custom-methods>
            <cmethod name='empty'/>
            <cmethod name='size'/>
            <cmethod name='clear'/>
            <cmethod name='erase'/>
        </custom-methods>

        <code-helper name='describe'>
            (fmt "[~A]" $.x.count)
            (loop for i from 0 below (min $.x.count 3)
              collect (fmt "(~A,~A,~A)" $.x[i] $.y[i] $.z[i]))
            (when (> $.x.count 3) "...")
        </code-helper>
    </struct-type>

    <bitfield-type type-name='z_level_flags'> bay12: TEMP_BLOCK_FLAG_*
        <flag-bit name='update'/> bay12: ADJUSTMENTS
        <flag-bit name='can_stop'/> bay12: REMOVE_ADJUSTMENTS_FLAGS
        <flag-bit name='update_twice'/> bay12: STOP_REMOVE_ADJUSTMENTS_FLAG
    </bitfield-type>

    <enum-type type-name='layer_type' base-type='int16_t'>
        <enum-item name='Surface' value='-1'/>
        <enum-item name='Cavern1'/>
        <enum-item name='Cavern2'/>
        <enum-item name='Cavern3'/>
        <enum-item name='MagmaSea'/>
        <enum-item name='Underworld'/>
    </enum-type>

    <enum-type type-name='world_construction_square_type' base-type='int16_t'> bay12: WorldConstructionSquareType
        <enum-item name='ROAD'/>
        <enum-item name='TUNNEL'/>
        <enum-item name='BRIDGE'/>
        <enum-item name='WALL'/>
    </enum-type>

    <class-type type-name='world_construction_square' original-name='world_construction_squarest'>
        <code-helper name='describe'> (describe-obj $.region_pos) </code-helper>

        <compound name='region_pos' type-name='coord2d'/>
        <int32_t name='construction_id' ref-target='world_construction'/>

        <stl-vector name='embark_x' type-name='int16_t'/>
        <stl-vector name='embark_y' type-name='int16_t'/>
        <stl-vector name='embark_exit' type-name='int16_t'/>
        <stl-vector name='embark_z' type-name='int16_t'/>

        <virtual-methods>
            <vmethod ret-type='world_construction_square_type' name='getType'/>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <enum name='loadversion' type-name='save_version'/>
            </vmethod>
            <vmethod is-destructor='true'/>
        </virtual-methods>
    </class-type>

    <class-type type-name='world_construction_square_roadst' inherits-from='world_construction_square'>
        <enum type-name='item_type' base-type='int16_t' name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>
    </class-type>

    <class-type type-name='world_construction_square_tunnelst' inherits-from='world_construction_square'/>

    <class-type type-name='world_construction_square_bridgest' inherits-from='world_construction_square'>
        <int32_t name='road_id' ref-target='world_construction'/>
        <enum type-name='item_type' base-type='int16_t' name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>
    </class-type>

    <class-type type-name='world_construction_square_wallst' inherits-from='world_construction_square'>
        <enum type-name='item_type' base-type='int16_t' name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>
    </class-type>

    <class-type type-name='world_construction' original-name='world_constructionst'
                instance-vector='$global.world.world_data.constructions.list' key-field='id'>
        <int32_t name='id'/>

        <stl-vector name='square_obj' pointer-type='world_construction_square'/>
        <compound name='square_pos' type-name='coord2d_path'/>

        <virtual-methods>
            <vmethod ret-type='world_construction_type' name='getType'/>
            <vmethod name='getName'><ret-type><pointer type-name='language_name'/></ret-type></vmethod>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <enum name='loadversion' type-name='save_version'/>
            </vmethod>
            <vmethod is-destructor='true'/>
        </virtual-methods>
    </class-type>

    <class-type type-name='world_construction_roadst' inherits-from='world_construction'>
        <compound type-name='language_name' name='name'/>
    </class-type>

    <class-type type-name='world_construction_tunnelst' inherits-from='world_construction'>
        <compound type-name='language_name' name='name'/>
    </class-type>

    <class-type type-name='world_construction_bridgest' inherits-from='world_construction'>
        <compound type-name='language_name' name='name'/>
    </class-type>

    <class-type type-name='world_construction_wallst' inherits-from='world_construction'>
        <compound type-name='language_name' name='name'/>
    </class-type>

</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
