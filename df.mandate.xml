<data-definition>
    <enum-type type-name='mandate_type'> bay12: Mandates, no external base type
        <enum-item name='Export'/>
        <enum-item name='Make'/>
        <enum-item name='Guild'/>
    </enum-type>

    <bitfield-type type-name='mandate_flag' base-type='uint32_t'> bay12: MANDATEFLAG_*
        <flag-bit name='mandate_total_exempt'/>
    </bitfield-type>

    <struct-type type-name='mandate' original-name='mandatest'>
        <pointer name='unit' type-name='unit'/>

        <enum name='mode' base-type='int16_t' type-name='mandate_type'/>

        <enum base-type='int16_t' name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>

        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>

        <int16_t name='amount_total'/>
        <int16_t name='amount_remaining'/>

        <int32_t name='timeout_counter' comment='counts once per 10 frames'/>
        <int32_t name='timeout_limit' comment='once counter passes limit, mandate ends'/>

        <compound name='punishment' type-name='punishmentst'/>
        <int8_t name='punish_multiple' comment='mega_punish, likely dates back to 23a Mining mandates'/>
        <bitfield name='flags' base-type='uint32_t' type-name='mandate_flag'/>
    </struct-type>

    <struct-type type-name='mandate_handlerst'>
        <stl-vector name='all' pointer-type='mandate'/>
    </struct-type>
</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
