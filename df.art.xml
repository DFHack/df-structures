<data-definition>
    <enum-type type-name='art_image_element_type'> bay12: ArtImageElement
        <enum-item name="CREATURE"/>
        <enum-item name="PLANT"/>
        <enum-item name="TREE"/>
        <enum-item name="SHAPE"/>
        <enum-item name="ITEM"/>
    </enum-type>

    <class-type type-name='art_image_element' original-name='art_image_elementst'>
        <int32_t name='count'/>
        <virtual-methods>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <enum name='loadversion' type-name='save_version'/>
            </vmethod>
            <vmethod ret-type='art_image_element_type' name='getType'/>
            <vmethod name='setID'> <int32_t name='ID' comment='race, item type, plant ID, or shape ID'/> </vmethod>
            <vmethod is-destructor='true'/>

            <vmethod name='clone'>
                <ret-type><pointer type-name='art_image_element'/></ret-type>
            </vmethod>
            <vmethod name='getSymbol'>
                <pointer type-name='uint8_t' name='sym'/>
                <pointer type-name='int32_t' name='priority'/>
            </vmethod>
            <vmethod name='getName'>
                <pointer type-name='stl-string' name='name'/>
                <bool name='useThe'/>
                <bool name='useName'/>
                <bool name='doMarkup'/>
            </vmethod>
            <vmethod name='getShortName'>
                <pointer type-name='stl-string' name='name'/>
                <bool name='useThe'/>
            </vmethod>
            <vmethod name='getGraphicsInfo'>
                <pointer type-name='int32_t' name='gfx_type'/>
                <pointer type-name='int32_t' name='gfx_id'/>
            </vmethod>
            <vmethod name='markDiscovered'/>

            <vmethod name='getColorAndShape'>
                <pointer name='colors'><stl-vector type-name='int16_t'/></pointer>
                <pointer name='shapes'><stl-vector type-name='int16_t'/></pointer>
            </vmethod>
        </virtual-methods>
    </class-type>

    <class-type type-name='art_image_element_creaturest' inherits-from='art_image_element'>
        <int32_t name='race' ref-target='creature_raw'/>
        <int16_t name='caste'/>
        <int32_t name='histfig' ref-target='historical_figure'/>
    </class-type>

    <class-type type-name='art_image_element_plantst' inherits-from='art_image_element'>
        <int32_t name='plant_id' ref-target='plant_raw'/>
    </class-type>

    <class-type type-name='art_image_element_treest' inherits-from='art_image_element'>
        <int32_t name='plant_id' ref-target='plant_raw'/>
    </class-type>

    <class-type type-name='art_image_element_shapest' inherits-from='art_image_element'>
        <int32_t name='shape_id' ref-target='descriptor_shape'/>
        <int16_t name='shape_adj'/>
    </class-type>

    <class-type type-name='art_image_element_itemst' inherits-from='art_image_element'>
        <enum base-type='int16_t' name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int16_t name='mat_index'/>
        <bitfield name='flags' type-name='item_flags'/>
        <int32_t name='item_id' ref-target='item' comment='for artifacts'/>
    </class-type>

    <enum-type type-name='art_image_property_type'> bay12: ArtImageProperty
        <enum-item name="transitive_verb"/>
        <enum-item name="intransitive_verb"/>
    </enum-type>

    <class-type type-name='art_image_property' original-name='art_image_propertyst'>
        <df-flagarray name='flags' comment='currently none used'/>
        <virtual-methods>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <enum name='loadversion' type-name='save_version'/>
            </vmethod>
            <vmethod ret-type='art_image_property_type' name='getType'/>
            <vmethod is-destructor='true'/>
            <vmethod name='clone'>
                <ret-type><pointer type-name='art_image_element'/></ret-type>
            </vmethod>

            <vmethod name='getName'>
                <pointer type-name='stl-string' name='str'/>
                <pointer type-name='art_image' name='image'/>
                <bool name='useName'/>
                <bool name='doMarkup'/>
            </vmethod>
        </virtual-methods>
    </class-type>

    <enum-type type-name='art_image_property_verb' base-type='int16_t'> bay12: ArtImageActionType
        <enum-item name='Withering'/>
        <enum-item name='SurroundedBy'/>
        <enum-item name='Massacring'/>
        <enum-item name='Fighting'/>
        <enum-item name='Laboring'/>
        <enum-item name='Greeting'/>
        <enum-item name='Refusing'/>
        <enum-item name='Speaking'/>
        <enum-item name='Embracing'/>
        <enum-item name='StrikingDown'/>
        <enum-item name='MenacingPose'/>
        <enum-item name='Traveling'/>
        <enum-item name='Raising'/>
        <enum-item name='Hiding'/>
        <enum-item name='LookingConfused'/>
        <enum-item name='LookingTerrified'/>
        <enum-item name='Devouring'/>
        <enum-item name='Admiring'/>
        <enum-item name='Burning'/>
        <enum-item name='Weeping'/>
        <enum-item name='LookingDejected'/>
        <enum-item name='Cringing'/>
        <enum-item name='Screaming'/>
        <enum-item name='SubmissiveGesture'/>
        <enum-item name='FetalPosition'/>
        <enum-item name='SmearedIntoSpiral'/>
        <enum-item name='Falling'/>
        <enum-item name='Dead'/>
        <enum-item name='Laughing'/>
        <enum-item name='LookingOffended'/>
        <enum-item name='BeingShot'/>
        <enum-item name='PlaintiveGesture'/>
        <enum-item name='Melting'/>
        <enum-item name='Shooting'/>
        <enum-item name='Torturing'/>
        <enum-item name='CommittingDepravedAct'/>
        <enum-item name='Praying'/>
        <enum-item name='Contemplating'/>
        <enum-item name='Cooking'/>
        <enum-item name='Engraving'/>
        <enum-item name='Prostrating'/>
        <enum-item name='Suffering'/>
        <enum-item name='BeingImpaled'/>
        <enum-item name='BeingContorted'/>
        <enum-item name='BeingFlayed'/>
        <enum-item name='HangingFrom'/>
        <enum-item name='BeingMutilated'/>
        <enum-item name='TriumphantPose'/>
    </enum-type>

    <class-type type-name='art_image_property_transitive_verbst' inherits-from='art_image_property'>
        <int32_t name='subject'/>
        <int32_t name='object'/>
        <enum base-type='int16_t' name="verb" type-name='art_image_property_verb'/>
    </class-type>

    <class-type type-name='art_image_property_intransitive_verbst' inherits-from='art_image_property'>
        <int32_t name='subject'/>
        <enum base-type='int16_t' name="verb" type-name='art_image_property_verb'/>
    </class-type>

    <enum-type type-name='art_facet_type'> bay12: ArtFacet
        <enum-item name="OWN_RACE"/>
        <enum-item name="FANCIFUL"/>
        <enum-item name="GOOD"/>
        <enum-item name="EVIL"/>
    </enum-type>

    <struct-type type-name='art_image' original-name='art_imagest'>
        <code-helper name='find-instance'>$(find-instance $art_image_chunk $$).images[$]</code-helper>
        <code-helper name='describe'>(describe-obj $.name)</code-helper>

        <stl-vector name='elements' pointer-type='art_image_element'/>
        <stl-vector name='properties' pointer-type='art_image_property'/>

        <int32_t name='event' ref-target='history_event'/>
        <compound name='name' type-name='language_name'/>
        <enum base-type='int32_t' name='spec_ref_type' type-name='specific_ref_type'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>
        <enum base-type='int16_t' name='quality' type-name='item_quality'/>
        <int32_t name='artist' ref-target='historical_figure'/>
        <int32_t name='site' ref-target='world_site'/>
        <pointer name='ref' type-name='general_ref'/>
        <int32_t name='year'/>
        <int32_t name='season_tick'/>
        <int32_t name='id' ref-target='art_image_chunk'/>
        <int16_t name='subid' ref-target='art_image' aux-value='$$.id'/>
    </struct-type>

    <struct-type type-name='art_image_chunk' original-name='art_image_chunkst'
                 instance-vector='$global.world.art_image_chunks' key-field='id'>
        <int32_t name='id' comment='art_image_*.dat'/>
        <static-array name='images' count='500'>
            <pointer type-name='art_image'/>
        </static-array>
    </struct-type>

    <struct-type type-name='art_image_ref' comment='not actually a real structure'>
        <int32_t name='id' ref-target='art_image_chunk'/>
        <int16_t name='subid' ref-target='art_image' aux-value='$$.id'/>
        <int32_t name='civ_id' ref-target='historical_entity' since='v0.34.01'/>
        <int32_t name='site_id' ref-target='world_site' since='v0.34.01'/>
    </struct-type>

    <enum-type type-name='poetic_form_action' base-type='int32_t'> bay12: PoeticIntentType
        <enum-item name='None' value='-1'/>
        <enum-item name='Describe'/>
        <enum-item name='Satirize'/>
        <enum-item name='AmuseAudience'/>
        <enum-item name='Complain'/>
        <enum-item name='Renounce'/>
        <enum-item name='MakeApology'/>
        <enum-item name='ExpressPleasure'/>
        <enum-item name='ExpressGrief'/>
        <enum-item name='Praise'/>
        <enum-item name='TeachMoralLesson'/>
        <enum-item name='MakeAssertion'/>
        <enum-item name='MakeCounterAssertion'/>
        <enum-item name='MakeConsession'/>
        <enum-item name='SynthesizePreviousIdeas'/>
        <enum-item name='DevelopPreviousIdea'/>
        <enum-item name='InvertTheAssertion'/>
        <enum-item name='UndercutAssertion'/>
        <enum-item name='MoveAwayFromPreviousIdeas'/>
        <enum-item name='ReflectPreviousIdeas'/>
        <enum-item name='ConsoleAudience'/>
        <enum-item name='RefuseConsolation'/>
        <enum-item name='OfferDifferentPerspective'/>
        <enum-item name='Beseech' since='v0.47.01'/>
    </enum-type>

    A - even, B - uneven for tone patterns, A - unstressed, B - stressed for accent patterns
    <enum-type type-name='poetic_form_pattern' base-type='int32_t'> bay12: PoeticStressType
        <enum-item name='None' value='-1'/>
        <enum-item name='AA' comment='Pyrrhic'/>
        <enum-item name='AB' comment='Iambic'/>
        <enum-item name='BA' comment='Trochaic'/>
        <enum-item name='BB' comment='Spondaic'/>
        <enum-item name='AAA' comment='Tribrachic'/>
        <enum-item name='BAA' comment='Dactylic'/>
        <enum-item name='ABA' comment='Amphibrachic'/>
        <enum-item name='AAB' comment='Anapestic'/>
        <enum-item name='ABB' comment='Bacchic'/>
        <enum-item name='BBA' comment='Antibacchic'/>
        <enum-item name='BAB' comment='Cretic'/>
        <enum-item name='BBB' comment='Molossic'/>
    </enum-type>

    <enum-type type-name='poetic_form_caesura_position' base-type='int32_t'> bay12: PoeticCaesuraType
        <enum-item name='None' value='-1'/>
        <enum-item name='Initial'/>
        <enum-item name='Medial'/>
        <enum-item name='Terminal'/>
    </enum-type>

    <enum-type type-name='poetic_form_mood' base-type='int32_t'> bay12: PoeticStyleType
        <enum-item name='None' value='-1'/>
        <enum-item name='Narrative'/>
        <enum-item name='Dramatic'/>
        <enum-item name='Reflective'/>
        <enum-item name='Riddle'/>
        <enum-item name='Ribald'/>
        <enum-item name='Light'/>
        <enum-item name='Solemn'/>
    </enum-type>

    <enum-type type-name='poetic_form_subject' base-type='int32_t'> bay12: PoeticSubjectType
        <enum-item name='None' value='-1'/> "a chosen subject"
        <enum-item name='Past'/>
        <enum-item name='CurrentEvents' comment='Present'/>
        <enum-item name='Future'/>
        <enum-item name='SomeoneRecentlyDeceased'/>
        <enum-item name='SomeoneRecentlyRetired'/>
        <enum-item name='Religion'/>
        <enum-item name='SpecificPlace' comment='Site'/>
        <enum-item name='SpecificWildernessRegion' comment='Subregion'/>
        <enum-item name='Nature'/>
        <enum-item name='Lover'/>
        <enum-item name='Family'/>
        <enum-item name='AlcoholicBeverages' comment='Booze'/>
        <enum-item name='Journey' comment='Travels'/>
        <enum-item name='War'/>
        <enum-item name='Hunt'/>
        <enum-item name='Mining'/>
        <enum-item name='Death'/>
        <enum-item name='Immortality'/>
        <enum-item name='SomeonesCharacter'/>
        <enum-item name='Histfig'/> "a historical figure" or a specific figure
        <enum-item name='Concept' comment='Sphere'/> "an abstract concept" or a specific concept
    </enum-type>

    <struct-type type-name='poetic_form_subject_target' is-union='true'>
        <compound name='Histfig'>
            <int32_t name='subject_histfig' ref-target='historical_figure'/>
        </compound>
        <compound name='Concept'>
            <enum name='subject_topic' base-type='int32_t' type-name='sphere_type'/>
        </compound>
    </struct-type>

    <bitfield-type type-name="poetic_form_feature" base-type="uint32_t"> bay12: POETIC_FORM_LINE_FLAG_*
        <flag-bit name="InternalRhyme"/>
        <flag-bit name="EndRhymesDontMatch" comment='SoftEndRhyme'/>
        <flag-bit name="Alliteration"/>
        <flag-bit name="Onomatopoeia"/>
        <flag-bit name="Antanaclasis"/>
        <flag-bit name="DifferentReadings"/> "different readings depending on word breaks"
        <flag-bit name="ReadBackwards"/> "can be read backwards as well as forwards"
        <flag-bit name="ReadOrthogonally"/> "can be read orthogonally across the standard lines"
        <flag-bit name="Emerge" comment='ReadPathwise'/> "emerge when reading along certain prescribed paths across the body of the poem"
        <flag-bit name="Assonance"/>
        <flag-bit name="Consonance"/>
        <flag-bit name="Elision"/>
        <flag-bit name="Epenthesis"/>
        <flag-bit name="Synchysis"/>
        <flag-bit name="QuantitativeMeter"/>
        <flag-bit name="Allegory"/>
        <flag-bit name="Ambiguity"/>
        <flag-bit name="Symbolism"/>
        <flag-bit name="Metaphor"/>
        <flag-bit name="Simile"/>
        <flag-bit name="Metonymy"/>
        <flag-bit name="VividImagery"/>
        <flag-bit name="Juxtaposision"/>
    </bitfield-type>

    <enum-type type-name='poetic_form_additional_feature' base-type='int32_t'> bay12: PoeticParallelismType
        <enum-item name='SharesUnderlyingMeaning'/>
        <enum-item name='ContrastsUnderlyingMeaning'/>
        <enum-item name='RequiredToMaintainPhrasing'/>
        <enum-item name='SameGrammaticalStructure'/>
        <enum-item name='SamePlacementOfAllusions'/>
        <enum-item name='ReverseWordOrder'/>
        <enum-item name='ReverseGrammaticalStructure'/>
        <enum-item name='PresentsDifferentView'/>
        <enum-item name='MustExpandIdea'/>
    </enum-type>

    <struct-type type-name='poetic_form' original-name='poetic_formst' instance-vector='$global.world.poetic_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name='originating_entity' ref-target='historical_entity'/> "originating in ..."
        <int32_t name='original_author' ref-target='historical_figure'/> "originally devised by ..."
        <int32_t name='subject_hf' ref-target='historical_figure' comment='worship target'/>

        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='tone_patterns' comment='tonal_replaces_stress'/>
            <flag-bit name='produces_individual_poems' comment='has_compositions'/>
        </bitfield>

        <stl-vector name='parts' pointer-type='poetic_form_part'/>
        <int32_t name='each_line_feet' comment='meter'/>
        <enum name='each_line_pattern' base-type='int32_t' type-name='poetic_form_pattern'/>

        <enum name='every_line_caesura_position' base-type='int32_t' type-name='poetic_form_caesura_position'/>

        "certain lines often ... and they sometimes ..."
        <stl-vector name='common_features'>
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>

        "is a narrative/... poetic form"
        <enum name='mood' base-type='int32_t' type-name='poetic_form_mood'/>
        <enum name='subject' base-type='int32_t' type-name='poetic_form_subject'/>
        <compound name='subject_target' type-name='poetic_form_subject_target'/>

        <enum name='action' base-type='int32_t' type-name='poetic_form_action'/>

        <int32_t name='preferred_perspective' comment='if not -1, ALWAYS written from that perspective'/>

        "use of ... is characteristic of the form" or "must feature lines which ..."
        <bitfield name='features' type-name='poetic_form_feature'/>

        <stl-vector name='perspectives' pointer-type='poetic_form_perspective'/>
    </struct-type>

    <struct-type type-name='poetic_form_part' original-name='poetic_form_sectionst'>
        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='end_rhyme_global_pattern'/> "line, couplet, tercet" if set, "brief verse paragraphs"/"full verse paragraphs" otherwise
            <flag-bit name='verse_paragraph'/>
            <flag-bit name='end_rhyme_shared_in_stanzas'/>
        </bitfield>

        "has X to Y couplets/..."
        <int32_t name='count_min'/>
        <int32_t name='count_max'/>

        size_in_lines is set: line, couplet, tercet, quatrain, quintain, etc.
        size_in_lines is not set: "brief verse" if less than 6, otherwise "full verse"
        <int32_t name='size'/>

        <static-array name='refrain_line' count='2' type-name='int32_t'/>
        <static-array name='refrain_id' count='2' type-name='int32_t'/>

        <stl-vector name='line_endings' type-name='int32_t'/>
        <stl-vector name='line_feet' type-name='int32_t'/> "the Nth line has XX feet"
        <stl-vector name='line_patterns'>
            <enum base-type='int32_t' type-name='poetic_form_pattern'/>
        </stl-vector>

        <stl-vector name='line_caesura_positions'>
            <enum base-type='int32_t' type-name='poetic_form_caesura_position'/>
        </stl-vector>

        "first line must make use of ..."
        <stl-vector name='line_features'>
            <bitfield type-name='poetic_form_feature'/>
        </stl-vector>

        "The XX line ZZ of ... on YY line"
        <stl-vector name='additional_features'> ZZ
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>
        <stl-vector name='additional_targets' type-name='int32_t'/> YY
        <stl-vector name='additional_lines' type-name='int32_t'/> XX

        <stl-vector name='line_mood'>
            <enum base-type='int32_t' type-name='poetic_form_mood'/>
        </stl-vector>
        <stl-vector name='line_subject'>
            <enum base-type='int32_t' type-name='poetic_form_subject'/>
        </stl-vector>
        <stl-vector name='line_subject_target' type-name='poetic_form_subject_target'/>
        <stl-vector name='line_action'>
            <enum base-type='int32_t' type-name='poetic_form_action'/>
        </stl-vector>
        <stl-vector name='line_persona_ind' type-name='int32_t'/>

        <int32_t name='some_lines_syllables'/> "it has lines with ... syllables"
        <enum name='some_lines_pattern' type-name='poetic_form_pattern'/> "it has lines with a tone/accent pattern of ..."

        "it has ... caesura in each line"
        <enum name='each_line_caesura_position' base-type='int32_t' type-name='poetic_form_caesura_position'/>

        "certain lines have ..." same as additional_features above
        <stl-vector name='certain_lines_additional_features'>
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>

        <enum name='mood' base-type='int32_t' type-name='poetic_form_mood'/>
        <enum name='subject' base-type='int32_t' type-name='poetic_form_subject'/>
        <int32_t name='subject_id'/>
        <enum name='action' base-type='int32_t' type-name='poetic_form_action'/>
        <int32_t name='persona_id'/>
        <bitfield base-type='uint32_t' name='line_flags' type-name='poetic_form_feature'/>
    </struct-type>

    <struct-type type-name='poetic_form_perspective' original-name='poetic_form_personast'>
        "written from the perspective of ..."
        <enum name='type' base-type='int32_t'> bay12: PoeticFormPersonaType
            <enum-item name='Author'/>
            <enum-item name='Soldier'/>
            <enum-item name='Traveller'/>
            <enum-item name='RelativeOfAuthor'/>
            <enum-item name='PartyOfDebate'/>
            <enum-item name='FictionalPoet'/>
            <enum-item name='Histfig'/>
            <enum-item name='Animal'/>
        </enum>
        <int32_t name='subtype' comment='Histfig:ID, Animal:Race'/>
        <int32_t name='subtype2' comment='Animal:Caste'/>
    </struct-type>

    <enum-type type-name='musical_form_purpose' base-type='int32_t'> bay12: MusicalFormIntentType
        <enum-item name='Entertainment'/>
        <enum-item name='Commemoration'/>
        <enum-item name='Devotion'/>
        <enum-item name='Military'/>
    </enum-type>

    <enum-type type-name='musical_form_style' base-type='int32_t'> bay12: MusicalDynamicType
        <enum-item name='None' value='-1'/>

        -- tempo styles
        <enum-item name='FreeTempo'/>
        <enum-item name='VerySlow'/>
        <enum-item name='Slow'/>
        <enum-item name='WalkingPace'/>
        <enum-item name='ModeratelyPaced'/>
        <enum-item name='ModeratelyFast'/>
        <enum-item name='Fast'/>
        <enum-item name='VeryFast'/>
        <enum-item name='ExtremelyFast'/>
        <enum-item name='DoubleTempo' comment="twice the tempo of the last passage"/>
        --  10
        <enum-item name='HalfTempo' comment="half the tempo of the previous passage"/>
        <enum-item name='Faster' comment="more quickly than the last passage"/>
        <enum-item name='Slower' comment="slower than the last passage"/>
        <enum-item name='ResumeTempo' comment="resumes the previous tempo"/>
        <enum-item name='OriginalTempo' comment="resumes the original tempo"/>
        <enum-item name='Accelerates'/>
        <enum-item name='SlowsAndBroadens'/>
        <enum-item name='ConsistentlySlowing'/>
        <enum-item name='HurriedPace'/>
        <enum-item name='GraduallySlowsAtEnd'/>
        --  20
        -- dynamic styles
        <enum-item name='WhisperedUndertones'/>
        <enum-item name='VerySoft'/>
        <enum-item name='Soft'/>
        <enum-item name='ModeratelySoft'/>
        <enum-item name='ModeratelyLoud'/>
        <enum-item name='Loud'/>
        <enum-item name='VeryLoud'/>
        <enum-item name='BecomeLouderAndLouder'/>
        <enum-item name='BecomeSofterAndSofter'/>
        <enum-item name='FadeIntoSilence'/>
        --  30
        <enum-item name='StartLoudThenImmediatelySoft'/>
        -- more tempo styles
        <enum-item name='SlowsAndDiesAwayAtEnd'/>
        <enum-item name='BecomesCalmerAtEnd'/>
        <enum-item name='BecomesFrenzied'/>
        -- overall styles
        <enum-item name='StressRhythm'/>
        <enum-item name='BeStately'/>
        <enum-item name='BeBright'/>
        <enum-item name='BeLively'/>
        <enum-item name='BeSkilled'/>
        <enum-item name='BeVigorous'/>
        --  40
        <enum-item name='BeSpirited'/>
        <enum-item name='BeDelicate'/>
        <enum-item name='BeFiery'/>
        <enum-item name='BringSenseOfMotion'/>
        <enum-item name='BeDecisive'/>
        <enum-item name='WithFeeling' since='v0.47.01'/>
        <enum-item name='FeelAgitated'/>
        <enum-item name='BePassionate'/>
        <enum-item name='Sparkle'/>
        <enum-item name='BeBroad'/>
        <enum-item name='BeMadeSweetly'/>
        --  50
        <enum-item name='BeStrong'/>
        <enum-item name='BeEnergetic'/>
        <enum-item name='BeForceful'/>
        <enum-item name='FeelHeroic'/>
        <enum-item name='BeMadeExpressively'/>
        <enum-item name='FeelFurious'/>
        <enum-item name='BeJoyful'/>
        <enum-item name='BeGrand'/>
        <enum-item name='BeMerry'/>
        <enum-item name='BeGraceful'/>
        --  60
        <enum-item name='BuildAsItProceeds'/>
        <enum-item name='EvokeTears'/>
        <enum-item name='BeMelancholic'/>
        <enum-item name='FeelMournful'/>
        <enum-item name='BeMadeWithLightTouch'/>
        <enum-item name='FeelHeavy'/>
        <enum-item name='FeelMysterious'/>
        <enum-item name='BeJumpy'/>
        <enum-item name='FeelPlayful'/>
        <enum-item name='FeelTender'/>
        --  70
        <enum-item name='FeelCalm'/>
        <enum-item name='BeTriumphant'/>
    </enum-type>

    <enum-type type-name='musical_form_pitch_style' base-type='int32_t'> bay12: HarmonicStructureType
        <enum-item name='None' value='-1'/>
        <enum-item name='SinglePitchesOnly'/>
        <enum-item name='IntervalsOnly'/>
        <enum-item name='SparseChords'/>
        <enum-item name='PitchClusters'/>
        <enum-item name='ChordLayers'/>
    </enum-type>

    <bitfield-type type-name="musical_form_feature" base-type="uint32_t"> bay12: MUSICAL_FLAG_*
        <flag-bit name='GlideFromNoteToNote' comment='Slides'/>
        <flag-bit name='UseGraceNotes'/>
        <flag-bit name='UseMordents'/>
        <flag-bit name='MakeTrills'/>
        <flag-bit name='PlayRapidRuns'/>
        <flag-bit name='LocallyImprovise' comment='Melisma'/>
        <flag-bit name='SpreadSyllablesOverManyNotes' comment='Syllabic'/>
        <flag-bit name='MatchNotesAndSyllables' comment='LocalImprovisation'/>

        <flag-bit name='Syncopate'/>
        <flag-bit name='AddFills'/>
        <flag-bit name='AlternateTensionAndRepose'/>
        <flag-bit name='ModulateFrequently'/>
        <flag-bit name='PlayArpeggios'/>
        <flag-bit name='PlayStaccato'/>
        <flag-bit name='PlayLegato'/>
        <flag-bit name='FreelyAdjustBeats'/>
    </bitfield-type>

    <enum-type type-name='musical_form_passage_component_type' base-type='int32_t'> bay12: VoiceRoleType
        <enum-item name='Melody'/>
        <enum-item name='Counterpoint'/>
        <enum-item name='Harmony'/>
        <enum-item name='Rhythm'/>
        <enum-item name='Unspecified'/>
    </enum-type>

    <enum-type type-name='musical_form_passage_type' base-type='int32_t'> bay12: MusicalPassageType
        <enum-item name='Unrelated' comment='Simple'/>
        <enum-item name='Introduction'/>
        <enum-item name='Exposition'/>
        <enum-item name='Recapitulation'/>
        <enum-item name='Synthesis'/>
        <enum-item name='Verse'/>
        <enum-item name='Chorus'/>
        <enum-item name='Finale'/>
        <enum-item name='Coda'/>
        <enum-item name='BridgePassage'/>
        <enum-item name='Theme'/>
        <enum-item name='Variation'/>
    </enum-type>

    <enum-type type-name='musical_form_passage_length_type' base-type='int32_t'> bay12: VoicePhraseLengthType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='Short'/>
        <enum-item name='MidLength'/>
        <enum-item name='Long'/>
        <enum-item name='Varied'/>
    </enum-type>

    <enum-type type-name='musical_form_melody_style' base-type='int32_t'> bay12: MelodyPatternType
        <enum-item name='Rising'/>
        <enum-item name='Falling'/>
        <enum-item name='RisingFalling'/>
        <enum-item name='FallingRising'/>
    </enum-type>

    <enum-type type-name='musical_form_melody_frequency' base-type='int32_t'> bay12: MelodyFrequencyType
        <enum-item name='Always'/>
        <enum-item name='Often'/>
        <enum-item name='Sometimes'/>
    </enum-type>

    <struct-type type-name='musical_form_interval' original-name='melody_accidentalst'>
        <int32_t name='degree'/>
        <bitfield name='flags' base-type='uint32_t'> bay12: MELODY_ACCIDENTAL_FLAG_*
            <flag-bit name='rising' comment='otherwise falling'/>
            <flag-bit name='flattened'/>
            <flag-bit name='sharpened'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='musical_form_melodies' original-name='melodyst'>
        <enum name='style' type-name='musical_form_melody_style' base-type='int32_t'/>
        <enum name='frequency' type-name='musical_form_melody_frequency' base-type='int32_t'/>
        <stl-vector name='intervals' pointer-type='musical_form_interval'/>
        <bitfield name='features' type-name='musical_form_feature'/>
    </struct-type>

    <struct-type type-name='musical_form_passage' original-name='musical_form_passagest'>
        <enum name='type' type-name='musical_form_passage_type' base-type='int32_t'/>
        <int32_t name='passage_reference' init-value='-1' comment="used when doing Exposition, Recapitualation, Synthesis, and Variation"/>
        <int32_t name='passage_range_end' init-value='-1' comment="when doing Synthesis of a range of passages"/>
        <int32_t name='min_number'/>
        <int32_t name='max_number'/>
        <int32_t name='poetic_form_id' ref-target='poetic_form'/>
        <int32_t name='written_content_id' ref-target='written_content' comment="suspect bug in exported legends (and possibly DF itself) as no mentioning of the poems (or any alternative) referenced here were mentioned in the two entries examined"/>
        <int32_t name='scale_id' ref-target='scale'/>
        <int32_t name='scale_sub_id' comment="references the scales element of the scale"/>
        <int32_t name='rhythm_id' ref-target='rhythm'/>
        <int32_t name='sub_rhythm' comment="Guess, based on the pattern above"/>
        <int32_t name='rhythm_pattern' comment="references the patterns element of rhythm"/>
        <stl-vector name='instruments' type-name='int32_t' comment="indices into the instruments vector"/>
        <stl-vector name='components'>
            <enum type-name='musical_form_passage_component_type' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='passage_lengths'>
            <enum type-name='musical_form_passage_length_type' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='lowest_register_range' type-name='int32_t' init-value='-1' comment="0-3 seen. Probably indices into the registers of the instruments referenced. Found no field for timbre description, though"/>
        <stl-vector name='highest_register_range' type-name='int32_t' init-value='-1' comment="0-3 seen. Probably indices into the registers of the instruments referenced. Found no field for timbre description, though"/>
        <enum name='tempo_style' type-name='musical_form_style' base-type='int32_t'/>
        <enum name='dynamic_style' type-name='musical_form_style' base-type='int32_t'/>
        <enum name='overall_style' type-name='musical_form_style' base-type='int32_t'/>
        <bitfield name='features' type-name='musical_form_feature'/>
        <enum name='pitch_style' type-name='musical_form_pitch_style' base-type='int32_t'/>
        <stl-vector name='melodies' pointer-type='musical_form_melodies'/>
        <int32_t name='min_unit_length' init-value='-1'/>
        <int32_t name='max_unit_length' init-value='-1'/>
    </struct-type>

    <struct-type type-name='musical_form_instruments' original-name='musical_form_voicest'>
        <int32_t name='instrument_subtype' ref-target='itemdef_instrumentst' comment='-1 = vocal'/>
        <bitfield base-type='uint32_t' name='substitutions'> bay12: MUSICAL_FORM_VOICE_FLAG_*
            <flag-bit name='singer'/>
            <flag-bit name='speaker'/>
            <flag-bit name='chanter'/>
        </bitfield>
        <bitfield type-name='musical_form_feature' name='features'/>
        <int32_t name='minimum_required' comment='tentative'/>
        <int32_t name='maximum_permitted' comment='tentative'/>
        <enum name='dynamic_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='overall_style' base-type='int32_t' type-name='musical_form_style'/>
    </struct-type>

    <struct-type type-name='musical_form_play_orderst'>
        <static-array name='passage_index' count='3' type-name='int32_t'/>
        <int32_t name='passage_num'/>
        <int32_t name='min_number'/>
        <int32_t name='max_number'/>
    </struct-type>

    <struct-type type-name='musical_form' original-name='musical_formst' instance-vector='$global.world.musical_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name="originating_entity" ref-target="historical_entity" comment="ID of the entity from which the musical form originated."/>
        <int32_t name="original_author" ref-target="historical_figure" comment="historical figure ID of the composer"/>
        <stl-vector name='passages' pointer-type='musical_form_passage'/>
        <stl-vector name='instruments' pointer-type='musical_form_instruments'/>
        <stl-vector name='melodies' pointer-type='musical_form_melodies'/>
        <stl-vector name='play_order' pointer-type='musical_form_play_orderst'/>
        <enum name='tempo_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='dynamic_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='overall_style' base-type='int32_t' type-name='musical_form_style'/>
        <int32_t name='poetic_form_id' ref-target='poetic_form'/>
        <int32_t name='written_content_id' ref-target='written_content'/>
        <int32_t name='scale_id' ref-target='scale'/>
        <int32_t name='scale_subid' comment='reference to scale_sub2'/>
        <int32_t name='rhythm_id' ref-target='rhythm'/>
        <int32_t name='sub_rhythm' comment='reference to sub_rhythms'/>
        <int32_t name='rhythm_pattern' comment='reference to patterns'/>
        <bitfield name='features' type-name='musical_form_feature'/>
        <enum name='pitch_style' base-type='int32_t' type-name='musical_form_pitch_style'/>
        <enum name='purpose' base-type='int32_t' type-name='musical_form_purpose'/>
        <int32_t name='devotion_target' ref-target='historical_figure'/>
        <bitfield base-type='uint32_t' name='flags'> bay12: MUSICAL_FORM_FLAG_*
            <flag-bit name='produces_individual_songs' comment='has_compositions'/>
            <flag-bit name='repeats_as_necessary'/>
        </bitfield>
    </struct-type>

    <enum-type type-name='dance_form_context' base-type='int32_t'> bay12: DancePurposeType
        <enum-item name='Sacred'/>
        <enum-item name='Celebration'/>
        <enum-item name='Participation'/>
        <enum-item name='Social'/>
        <enum-item name='Performance'/>
        <enum-item name='War'/>
    </enum-type>

    <enum-type type-name='dance_form_group_size' base-type='int32_t'> bay12: DanceGroupingType
        <enum-item name='Solo'/>
        <enum-item name='Partner'/>
        <enum-item name='Group'/>
    </enum-type>

    <enum-type type-name='dance_form_configuration' base-type='int32_t'> bay12: DanceGroupShapeType
        <enum-item name='NONE' value='-1' comment="hard to have a configuration with a solo performer"/>
        <enum-item name='SingleLine'/>
        <enum-item name='SeveralLines'/>
        <enum-item name='Circle'/>
        <enum-item name='DoubleCircle'/>
        <enum-item name='LooselyMingled'/>
    </enum-type>

    <enum-type type-name='dance_form_movement_path' base-type='int32_t'> bay12: DanceLineOfDanceType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='TurnClockwise'/>
        <enum-item name='TurnCounterClockwise'/>
        <enum-item name='ImprovisedPath'/>
        <enum-item name='IntricatePath'/>
    </enum-type>

    <enum-type type-name='dance_form_partner_distance' base-type='int32_t'> bay12: DanceConnectionDistanceType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='Closely'/>
        <enum-item name='OpenContact'/>
        <enum-item name='RareContact'/>
    </enum-type>

    <enum-type type-name='dance_form_partner_intent' base-type='int32_t'> bay12: DanceConnectionTensionType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='PushingTogether'/>
        <enum-item name='PullingAway'/>
        <enum-item name='Touch'/>
        <enum-item name='LightTouch'/>
        <enum-item name='VisualCues'/>
        <enum-item name='SpokenCues'/>
    </enum-type>

    <enum-type type-name='dance_form_partner_cue_frequency' base-type='int32_t'> bay12: DanceConnectionTimeType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='Constantly'/>
        <enum-item name='Briefly'/>
    </enum-type>

    <enum-type type-name='dance_form_partner_change_type' base-type='int32_t'> bay12: DanceGroupDynamicType
        <enum-item name='NONE' value='-1'/>
        <enum-item name='LeadAdvanceAlongMainLineOfMotion'/>
        <enum-item name='LeadAdvanceAgainstMainLineOfMotion'/>
        <enum-item name='LeadTurningOutClockwise'/>
        <enum-item name='LeadTurningOutCounterClockwise'/>
    </enum-type>

    <enum-type type-name='dance_form_move_type' base-type='int32_t'> bay12: DanceComponentType
        <enum-item name='SquareStep'/>
        <enum-item name='CircularStep'/>
        <enum-item name='TriangleStep'/>
        <enum-item name='FigureEightStep'/>
        <enum-item name='IntricateStep'/>
        <enum-item name='Dance'/>
        <enum-item name='Turn'/>
        <enum-item name='FacialExpression'/>
        <enum-item name='HandGesture'/>
        <enum-item name='StraightWalk'/>
        --  10
        <enum-item name='CurvedWalk'/>
        <enum-item name='Run'/>
        <enum-item name='Leap'/>
        <enum-item name='Kick'/>
        <enum-item name='LeftKick'/>
        <enum-item name='RightKick'/>
        <enum-item name='LegLift'/>
        <enum-item name='LeftLegLift'/>
        <enum-item name='RightLegLift'/>
        <enum-item name='BodyLevel'/>
        --  20
        <enum-item name='BodyLevelChange'/>
        <enum-item name='ArmCarriage'/>
        <enum-item name='RaisedLeftArm'/>
        <enum-item name='RaisedRightArm'/>
        <enum-item name='RaisedArms'/>
        <enum-item name='Spin'/>
        <enum-item name='IndependentBodyMovement'/>
        <enum-item name='Sway'/>
        <enum-item name='ForwardBend'/>
        <enum-item name='BackwardBend'/>
        --  30
        <enum-item name='LeftwardBend'/>
        <enum-item name='RightwardBend'/>
        <enum-item name='Footwork'/>
        <enum-item name='MovementAlongLineOfDance' comment='BodyFlight'/>
    </enum-type>

    <enum-type type-name='dance_form_move_modifier' base-type='int32_t'> bay12: DanceComponentAdjectiveType
        <enum-item name='NONE' value='-1'/>
        --  0
        <enum-item name='Graceful'/>
        <enum-item name='Serene'/>
        <enum-item name='Calm'/>
        <enum-item name='Grotesque'/>
        <enum-item name='Crude'/>
        <enum-item name='Refined'/>
        <enum-item name='Understated'/>
        <enum-item name='Delicate'/>
        <enum-item name='Elaborate'/>
        <enum-item name='Expressive'/>
        --  10
        <enum-item name='Strong'/>
        <enum-item name='Large'/>
        <enum-item name='Weightless'/>
        <enum-item name='Fluid'/>
        <enum-item name='Undulating'/>
        <enum-item name='Soft'/>
        <enum-item name='Jerking'/>
        <enum-item name='SharpEdged'/>
        <enum-item name='StraightLined'/>
        <enum-item name='High'/>
        --  20
        <enum-item name='Low'/>
        <enum-item name='LoudlyPercussive'/>
        <enum-item name='SoftlyPercussive'/>
        <enum-item name='Aborted'/>
        <enum-item name='PartiallyRealized'/>
        <enum-item name='Energetic'/>
        <enum-item name='Passionate'/>
        <enum-item name='Vivacious'/>
        <enum-item name='Joyous'/>
        <enum-item name='Proud'/>
        --  30
        <enum-item name='Flamboyant'/>
        <enum-item name='Lively'/>
        <enum-item name='Spirited'/>
        <enum-item name='Vigorous'/>
        <enum-item name='Intense'/>
        <enum-item name='Aggressive'/>
        <enum-item name='Powerful'/>
        <enum-item name='Sluggish'/>
        <enum-item name='Relaxed'/>
        <enum-item name='Passive'/>
        --  40
        <enum-item name='Subtle'/>
        <enum-item name='Sensual'/>
        <enum-item name='Debauched'/>
        <enum-item name='Twisting'/>
        <enum-item name='Sprightly'/>
        <enum-item name='Sinuous'/>
    </enum-type>

    <bitfield-type type-name="dance_form_move_location" base-type="uint32_t"> bay12: DANCE_COMPONENT_FLAG_*
        <flag-bit name='SimultaneousWithPrevious'/>
        <flag-bit name='ChainsAfterPrevious'/>
        <flag-bit name='MirroredByGroupMembers'/>
        <flag-bit name='InRetrogradeByGroupMembers'/>
        <flag-bit name='InSuccessionByGroupMembers'/>
        <flag-bit name='ShadowedByGroupMembers'/>
        <flag-bit name='Lead'/>
        <flag-bit name='Follower'/>
    </bitfield-type>

    <struct-type type-name='dance_form_section' original-name='dance_sectionst'>
        <enum name='section_grouping' type-name='dance_form_group_size' base-type='int32_t'/>
        <int32_t name='section_grouping_number_min' init-value='1'/>
        <int32_t name='section_grouping_number_max' init-value='1'/>
        <enum name='section_group_shape' type-name='dance_form_configuration' base-type='int32_t'/>
        <enum name='movement_path' type-name='dance_form_movement_path' base-type='int32_t'/>
        <int32_t name='move_id' comment="index in the moves vector"/>
        <enum name='partner_distance' type-name='dance_form_partner_distance' base-type='int32_t'/>
        <enum name='partner_intent' type-name='dance_form_partner_intent' base-type='int32_t'/>
        <enum name='partner_cue_frequency' type-name='dance_form_partner_cue_frequency' base-type='int32_t'/>
        <stl-vector name='partner_changes'>
            <enum type-name='dance_form_partner_change_type' base-type='int32_t'/>
        </stl-vector>
        <uint32_t name='dance_flag' init-value='0'/>
        <int32_t name='acts_out_civ' ref-target='historical_entity'/>
        <int32_t name='acts_out_hf_story' ref-target='historical_figure'/>
        <int32_t name='imitate_animal_movement' ref-target='creature_raw'/>
        <stl-vector name='type'>
            <enum type-name='dance_form_move_type' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='modifier'>
            <enum type-name='dance_form_move_modifier' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='parameter' type-name='int32_t' init-value='1' comment="Depends on type (turns are in signed angles, steps are in number of steps, etc.)"/>
        <stl-vector name='location'>
            <bitfield type-name='dance_form_move_location'/>
        </stl-vector>
        <int32_t name='musical_passage_id'/>
    </struct-type>

    <bitfield-type type-name="dance_move_flag" base-type="uint32_t"> bay12: DANCE_MOVE_FLAG_*
        <flag-bit name='BasicMovement'/>
        <flag-bit name='DancePosition'/>
        <flag-bit name='DanceMove'/>
    </bitfield-type>

    <struct-type type-name='dance_form_move' original-name='dance_movest'>
        <stl-string name='name'/>
        <stl-vector name='type'>
            <enum type-name='dance_form_move_type' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='modifier'>
            <enum type-name='dance_form_move_modifier' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='parameter' type-name='int32_t' init-value='1' comment="Depends on type (turns are in signed angles, steps are in number of steps, etc.)"/>
        <stl-vector name='location'>
            <bitfield type-name='dance_form_move_location'/>
        </stl-vector>
        <bitfield name='flag' type-name='dance_move_flag'/>
    </struct-type>

    <struct-type type-name='dance_form' original-name='dance_formst' instance-vector='$global.world.dance_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name='musical_form_id'/>
        <int32_t name='music_written_content_id'  ref-target='written_content' comment='at most one of this and musical_form_id is non null'/>
        <enum name='context' type-name='dance_form_context' base-type='int32_t'/>
        <int32_t name="originating_entity" ref-target="historical_entity" comment="ID of the entity from which the dance form originated."/>
        <int32_t name="original_author" ref-target="historical_figure" comment="ID of the historical figure who developed the dance form."/>
        <bitfield base-type='uint32_t' name='flags'> bay12: DANCE_FORM_FLAG_*
            <flag-bit comment='has_compositions'/>
        </bitfield>
        <enum name='group_size' type-name='dance_form_group_size' base-type='int32_t'/>
        <int32_t name='group_number_min' init-value='-1'/>
        <int32_t name='group_number_max' init-value='-1'/>
        <enum name='configuration' type-name='dance_form_configuration' base-type='int32_t'/>
        <enum name='movement_path' type-name='dance_form_movement_path' base-type='int32_t'/>
        <int32_t name='basic_movement_index' init-value='-1'/>
        <enum name='partner_distance' type-name='dance_form_partner_distance' base-type='int32_t' comment="NONE when not pair dance"/>
        <enum name='partner_intent' type-name='dance_form_partner_intent' base-type='int32_t' comment="NONE when not pair dance"/>
        <enum name='partner_cue_frequency' type-name='dance_form_partner_cue_frequency' base-type='int32_t' comment="NONE when not pair dance and when 'normal'"/>
        <stl-vector name='partner_changes'>
            <enum type-name='dance_form_partner_change_type' base-type='int32_t'/>
        </stl-vector>
        <bitfield base-type='uint32_t' name='dance_flags'> bay12: DANCE_FLAG_*
            <flag-bit comment='acts_out_story_in_musics_poetry'/>
        </bitfield>
        <int32_t name='entity' ref-target='historical_entity' comment='Civilization the dance acts out'/>
        <int32_t name='hfid' ref-target='historical_figure' comment="Character whose story the dance acts out"/>
        <int32_t name='race' ref-target='creature_raw' comment="Creature whose movements are imitated"/>
        <stl-vector name='move_type'>
            <enum type-name='dance_form_move_type' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='move_modifier'>
            <enum type-name='dance_form_move_modifier' base-type='int32_t'/>
        </stl-vector>
        <stl-vector name='move_parameter' type-name='int32_t' init-value='1' comment="Depends on type (turns are in signed angles, steps are in number of steps, etc.)"/>
        <stl-vector name='move_location'>
            <bitfield type-name='dance_form_move_location'/>
        </stl-vector>
        <stl-vector name='sections' pointer-type='dance_form_section'/>
        <stl-vector name='moves' pointer-type='dance_form_move'/>
    </struct-type>

    <enum-type type-name='scale_type' base-type='int32_t'> bay12: ScaleFoundationType
        <enum-item name='Octave' comment="The octave is divided into X steps of even length"/>
        <enum-item name='Variable' comment="The octave is divided into notes at varying intervals, approximated by quartertones"/>
        <enum-item name='PerfectFourth' comment="The perfect fourth interval is divided into steps of even length"/>
    </enum-type>

    <struct-type type-name='chord' original-name='scale_chordst'>
        <stl-string name='name'/>
        <static-array name='notes' type-name='int32_t' count='5' comment="chord_size entries used. Refers to the notes indices"/>
        <int32_t name='chord_size'/>
        <bitfield base-type='uint32_t' name='flags'> bay12: SCALE_CHORD_FLAG_*
            <flag-bit comment='lower'/>
        </bitfield>
    </struct-type>

    <enum-type type-name='scale_construction_type' base-type='int32_t'> bay12: ScaleConstructionType
        <enum-item name='ByInterval'/>
        <enum-item name='PerfectFifthJoinedPerfectFourth'/>
        <enum-item name='PerfectFifthHalfMajorThird'/>
        <enum-item name='TritoneHalfPercentFourth'/>
        <enum-item name='PerfectFourthWholePerfectFourth'/>
    </enum-type>

    <struct-type type-name='named_scale' original-name='scale_constructionst'>
        <enum name='type' type-name='scale_construction_type'/>
        <stl-string name='name'/>
        <static-array name='degrees' type-name='int32_t' count='7' comment="indices into the (not necessarily named) notes of the scale"/>
        <int32_t name='degrees_used' comment="elements used in array above"/>
        <static-array name='chord_index' type-name='int32_t' count='2'/>
    </struct-type>

    <enum-type type-name='scale_naming_type' base-type='int32_t'> bay12: ScaleNamingType
        <enum-item name='EveryNote'/>
        <enum-item name='PreferredNotes'/>
        <enum-item name='EveryNoteAfterConstructionByDegree'/>
        <enum-item name='PreferredNoteAfterConstructionByDegree'/>
    </enum-type>

    <struct-type type-name='scale_namingst'>
        <enum name='type' type-name='scale_naming_type'/>
        <static-array name='name' type-name='stl-string' count='25'/>
        <static-array name='abreviation' type-name='stl-string' count='25'/>
        <static-array name='number' type-name='int32_t' count='25'/>
        <int32_t name='length' comment='number of elements of the arrays above used'/>
    </struct-type>

    <struct-type type-name='scale' instance-vector='$global.world.scales.all' key-field='id'>
        <int32_t name='id'/>
        <bitfield name='flags' base-type='uint32_t'> bay12: SCALE_FLAG_*
            <flag-bit name='tonic_note_fixed_at_performance' comment='moveable_tonic'/>
        </bitfield>
        <enum name='type' type-name='scale_type' base-type='int32_t'/>
        <static-array name='quartertones_used' type-name='int32_t' count='25' comment="Quartertone corresponding note matches. Scale_length elements are used when type = Variable. Unused elements uninitialized"/>
        <int32_t name='scale_length' comment="Number of notes in the scale. When type = Variable this is the number of used indices pointing out their placement."/>
        <stl-vector name='chords' pointer-type='chord'/>
        <stl-vector name='scales' pointer-type='named_scale' comment="Note that the top level scale doesn't have a name. These seem to be named scales using the unnamed scale's notes as their foundation"/>
        <compound name='notes' type-name='scale_namingst'/>
    </struct-type>

    <struct-type type-name='rhythm' instance-vector='$global.world.rhythms.all' key-field='id'>
        <int32_t name='id'/>
        <stl-vector name='patterns' pointer-type='rhythm_pattern'/>
        <stl-vector name='sub_rhythms' pointer-type='sub_rhythm'/>
        <bitfield name='flags' base-type='uint32_t'> bay12: RHYTHM_FLAG_*
            <flag-bit name='fundamental_polyrhythm'/>
            <flag-bit name='fundamental_polymeter'/>
        </bitfield>
    </struct-type>

    <bitfield-type type-name='beat_flag' base-type='uint32_t'> bay12: RHYTHM_BEAT_FLAG_*
        <flag-bit name='PrimaryAccent'/>
        <flag-bit name='Accent'/>
        <flag-bit name='Regular'/>
        <flag-bit name='Early'/>
        <flag-bit name='Late'/>
    </bitfield-type>

    <struct-type type-name='rhythm_barst'>
        <pointer name='beat' is-array='true' type-name='beat_flag' comment="Length as per length field"/>
        <int32_t name='length'/>
    </struct-type>

    <struct-type type-name='rhythm_pattern' original-name='rhythm_patternst'>
        <stl-string name='name'/>
        <stl-vector name='bars' pointer-type='rhythm_barst'/>
        <pointer name='beat_name' type-name='stl-string' is-array='true' comment="length as per length field"/>
        <pointer name='beat_abbreviation' type-name='stl-string' is-array='true' comment="length as per length field"/>
        <int32_t name='length'/>
    </struct-type>

    <bitfield-type type-name='rhythm_construction_pattern_flag' base-type='uint32_t'> bay12: RHYTHM_CONSTRUCTION_PATTERN_FLAG_*
        <flag-bit name='Primary'/>
        <flag-bit name='Secondary'/>
    </bitfield-type>

    <struct-type type-name='sub_rhythm' original-name='rhythm_constructionst'>
        <stl-string name='name'/>
        <stl-vector name='patterns' type-name='int32_t' comment="indices into patterns"/>
        <stl-vector name='pattern_flags' type-name='rhythm_construction_pattern_flag' comment="Same length as patterns"/>
        <bitfield name='flags' base-type='uint32_t'> bay12: RHYTHM_CONSTRUCTION_FLAG_*
            <flag-bit name='polymetric'/>
        </bitfield>
    </struct-type>

    <enum-type type-name='occupation_type' base-type='int32_t' comment='bay12: Occupation'>
        <enum-item name='TAVERN_KEEPER'/>
        <enum-item name='PERFORMER'/>
        <enum-item name='SCHOLAR'/>
        <enum-item name='MERCENARY'/>
        <enum-item name='MONSTER_SLAYER'/>
        <enum-item name='SCRIBE'/>
        <enum-item name='UNUSED_01'/>
        <enum-item name='DOCTOR'/>
        <enum-item name='DIAGNOSTICIAN'/>
        <enum-item name='SURGEON'/>
        <enum-item name='BONE_DOCTOR'/>
    </enum-type>

    <struct-type type-name='occupation' instance-vector='$global.world.occupations.all' key-field='id' original-name='occupationst'>
        <int32_t name='id'/>
        <enum name='type' base-type='int32_t' type-name='occupation_type'/>
        <int32_t name='histfig_id' ref-target='historical_figure'/>
        <int32_t name='unit_id' ref-target='unit'/>
        <int32_t name='location_id' ref-target='abstract_building' aux-value='$$.site_id'/>
        <int32_t name='site_id' ref-target='world_site'/>
        <int32_t name='group_id' ref-target='historical_entity'/>
        <stl-vector name='service_order' pointer-type='service_orderst' comment='local id vector'/>
        <int32_t name='next_service_order_id'/>

        <pointer name='wg_site' type-name='world_site' has-bad-pointers='true' comment='worldgen only'/>
        <pointer name='wg_ab' type-name='abstract_building' has-bad-pointers='true' comment='worldgen only'/>
    </struct-type>

    <enum-type type-name='service_order_type' base-type='int32_t' comment='bay12: ServiceOrder'>
        <enum-item name='NONE' value='-1'/>
        <enum-item name='DRINK'/>
        <enum-item name='ROOM_RENTAL'/>
        <enum-item name='EXTEND_ROOM_RENTAL'/>
    </enum-type>

    <struct-type type-name='service_orderst'>
        <int32_t name='local_id'/>
        <enum base-type='int32_t' name="type" type-name='service_order_type'/>
        <enum name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype'/>
        <int16_t name='mat_type'/>
        <int32_t name='mat_index'/>
        <int32_t name='customer_hfid'/>
        <int32_t name='customer_unid'/>
        <int32_t name='money_owed'/>
        <int32_t name='room_ab_local_id' comment='not zone or ab id -- something local to ab'/>
        <int32_t name='start_year'/>
        <int32_t name='start_season_count'/>
        <int32_t name='end_year'/>
        <int32_t name='end_season_count'/>
        <int32_t name='last_failed_year'/>
        <int32_t name='last_failed_season_count'/>
        <int32_t name='activity_id'/>
        <int32_t name='activity_event_id'/>
        <bitfield name='flag'>
            <flag-bit name='completed'/>
        </bitfield>
    </struct-type>

</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
