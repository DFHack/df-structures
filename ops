{"version":1,"ops":[{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526055513,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQxMjI2Mw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-388412263"},"message":"\"inactive\" sounds good to me. If I put up a list, are you able to help look through tools that use this flag? It shouldn't be too hard to stop them all from breaking, but whether they use the flag correctly is another matter.","files":null},{"type":5,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526055539,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE2MjIyOTQ2ODY="},"added":["fields"],"removed":[]},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526056324,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQxNjA0NA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-388416044"},"message":"With \"set up a list\" I assume you mean a list of plugins and scripts using it?\nYes, I can do that, guided by that list.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526056763,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQxNzk3MA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-388417970"},"message":"Yeah, that. Hopefully there aren't any library functions that are problematic, because tools that use those could be harder to track down.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528212713,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDc1NDc1OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394754758"},"message":"Units::isDead() in Units.cpp uses flags1.bits.dead. So does isAlive().\n\n`grep -lr flags1.dead scripts/`:\n\n```\nscripts/adaptation.rb\nscripts/deathcause.rb\nscripts/devel/export-dt-ini.lua\nscripts/exterminate.rb\nscripts/fix/dead-units.lua\nscripts/fix/feeding-timers.lua\nscripts/fix/retrieve-units.lua\nscripts/fix/stuck-merchants.lua\nscripts/full-heal.lua\nscripts/ghostly.lua\nscripts/gui/room-list.lua\nscripts/gui/unit-info-viewer.lua\nscripts/starvingdead.rb\nscripts/superdwarf.rb\nscripts/warn-starving.lua\n```\n\n`git ls-files plugins/|xargs grep -l flags1.bits.dead`\n\n```\nplugins/advtools.cpp\nplugins/cursecheck.cpp\nplugins/diggingInvaders/diggingInvaders.cpp\nplugins/dwarfvet.cpp\ngrep: plugins/isoworld: Is a directory\nplugins/labormanager/labormanager.cpp\nplugins/manipulator.cpp\nplugins/petcapRemover.cpp\nplugins/rendermax/renderer_light.cpp\nplugins/siege-engine.cpp\ngrep: plugins/stonesense: Is a directory\nplugins/tweak/tweak.cpp\n```\n\n`grep -lr flags1.bits.dead plugins/stonesense`:\n\n```\nplugins/stonesense/Creatures.cpp\n```","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528217430,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDc4MDUxNw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394780517"},"message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528217430,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTY5MjQ5"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528217660,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTcxMjA1"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528217823,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTcyNDQ0"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528217998,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTczNjg0"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n-fix/stuck-merchants: Ditto.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528218394,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTc2MTg3"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n- fix/stuck-merchants: Ditto.\n- full-heal: The first usage should be changed to flags2.killed. It shouldn't matter in practice, as you can't target inactive units that aren't dead.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528218841,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTc5NTgz"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n- fix/stuck-merchants: Ditto.\n- full-heal: The first usage should be changed to flags2.killed. It shouldn't matter in practice, as you can't target inactive units that aren't dead.\n- ghostly: I can't say, as I know too little about adventure mode. It doesn't look right that the flags2.killed flag isn't involved. Someone else needs to look at this script.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528219150,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTgxNDky"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n- fix/stuck-merchants: Ditto.\n- full-heal: The first usage should be changed to flags2.killed. It shouldn't matter in practice, as you can't target inactive units that aren't dead.\n- ghostly: I can't say, as I know too little about adventure mode. It doesn't look right that the flags2.killed flag isn't involved. Someone else needs to look at this script.\n- gui/room-list: Should probably change to use flags2.killed. If you were to be able to access a raider party member somehow you should probably be able to change assignments.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528219550,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTg0MjQ4"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n- fix/stuck-merchants: Ditto.\n- full-heal: The first usage should be changed to flags2.killed. It shouldn't matter in practice, as you can't target inactive units that aren't dead.\n- ghostly: I can't say, as I know too little about adventure mode. It doesn't look right that the flags2.killed flag isn't involved. Someone else needs to look at this script.\n- gui/room-list: Should probably change to use flags2.killed. If you were to be able to access a raider party member somehow you should probably be able to change assignments.\n- unit-info-viewer:  Should use flags2.killed.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528220117,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMTg3ODcz"},"target":"b1bbd437cd33e1eac5c0dcb51cc976ee817eb6589e31fee66223d49cd53582c2","message":"I'm starting with the scripts. I intend to update progress here and generate a pull request with all/most of them when done.\n- adaptation.rb: Straight translation to flags2.killed\n- deathcause: Pull request produced.\n- devel/export-dt-ini: Asked Clément for advice\n- exterminate: The first usage should stay as it is, while the second should be replaced with flags2.killed. When testing that I found the magma drowning function to be very good at collateral damage, as it starts with dumping 7/7 units of magma on the target, and then apparently (I don't quite understand how) adds more if the target isn't dead yet, as the magma spreads over a much larger area than 7 tile. I don't intend to mess with that, however.\n- fix/dead-units: \"flags1.dead and\" ought to be removed. It's redundant and may lead others astray.\nAs an aside, there are other changes that could be done to this script, such as adding hysteresis so units don't disappear immediately.\n- fix/feeding-timers: Should remain unchanged. We shouldn't mess with inactive units.\n- fix/retrieve-units: Should remain. The script targets inactive units, not dead ones.\n- fix/stuck-merchants: Ditto.\n- full-heal: The first usage should be changed to flags2.killed. It shouldn't matter in practice, as you can't target inactive units that aren't dead.\n- ghostly: I can't say, as I know too little about adventure mode. It doesn't look right that the flags2.killed flag isn't involved. Someone else needs to look at this script.\n- gui/room-list: Should probably change to use flags2.killed. If you were to be able to access a raider party member somehow you should probably be able to change assignments.\n- unit-info-viewer:  Should use flags2.killed.\n- starvingdead: The first check is correct, as we don't want to start weakening inbound undead. I think the second one is as well, as I guess the rem_tags2 thingie indicates the unit should be processed further.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528220013,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDc5NTYzNw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394795637"},"message":"We should probably verify that dead units always have the `killed` flag set.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528226138,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDc5NjUyNQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394796525"},"message":"True. So far I haven't encountered any dead units without that flag, but I don't play adventure mode, and I don't generate ghosts.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528226138,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjMxMTI0"},"target":"a308f9c6d4cc661b34c7ef2d583340672aec06758b9e3d8b27d19bfbd9c8e203","message":"True. So far I haven't encountered any dead units without that flag, but I don't play adventure mode, and I don't generate ghosts.\n\nI made a script that counted the number of \"all\" and \"active\" units with the killed flag set and for those units I checked the \"dead\" flag. The script was run on 5 fortresses downloaded from DFFD for fault finding, and in every case the number of active units with the \"killed\" flag was equal to the dead units list count as displayed by DF and no unit had the \"killed\" flag set without the \"dead/inactive\" one being set too. In some fortresses the number of active \"killed\" units was equal to the number of \"killed\" \"all\" units, while in some (probably subjected to fix/dead-units) the \"active\" number was smaller.\nWhile not a proof, it's a good indication the \"dead/inactive\" flag is always set when a unit is dead, and that the \"killed\" flag is as well.\nIt can be noted that I don't think ghosts are present in the saves, and that they're all fortresses.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528228524,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDgzNzMzOQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394837339"},"message":"Units::isDead: The wrong flag is definitely used, as live inactive units are designated as dead. However, the construction might be an indication that flag2.killed might not be set on ghosts. If that's the case the scripts above would have to be revisited to determine what to do in the ghost case.\n\nUnits::isAlive: Here the case is more iffy, as is the isDead/isAlive pair, as the isInactive state isn't made available, giving the false impression that there are only two states of interest. I can imagine cases where I'd be interested in whether a unit is alive, as well as cases where I only want active living ones.\n\nBasically Units::isActive ought to be added, and every usage of isAlive should be checked to exclude inactive units or not. With this logic isAlive should use a check against flags2.killed. Also, isDead needs to be checked as well, as its negation might be used (incorrectly) to try to find active living units.\nThe NOT_LIVING check on isAlive already means isDead and isAlive aren't each others' negations, as undead fall in neither category (but !isDead should probably be checked anyway).\n\nAlthough isUndead can be extracted as (not isAlive and not isDead), adding such a function ought to be contemplated as well, if for no other reason than to clarify the existence of this intermediate state.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528228524,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjQ2NzA1"},"target":"5b94d221f59b5cc84eee21048ee02eab4eeeb2d0eab3dd9c4899a9d458640c07","message":"Units::isDead: The wrong flag is definitely used, as live inactive units are designated as dead. However, the construction might be an indication that flag2.killed might not be set on ghosts. If that's the case the scripts above would have to be revisited to determine what to do in the ghost case.\n\nUnits::isAlive: Here the case is more iffy, as is the isDead/isAlive pair, as the isInactive state isn't made available, giving the false impression that there are only two states of interest. I can imagine cases where I'd be interested in whether a unit is alive, as well as cases where I only want active living ones.\n\nBasically Units::isActive ought to be added, and every usage of isAlive should be checked to exclude inactive units or not. With this logic isAlive should use a check against flags2.killed. Also, isDead needs to be checked as well, as its negation might be used (incorrectly) to try to find active living units.\nThe NOT_LIVING check on isAlive already means isDead and isAlive aren't each others' negations, as undead fall in neither category (but !isDead should probably be checked anyway).\n\nAlthough isUndead can be extracted as (not isAlive and not isDead), adding such a function ought to be contemplated as well, if for no other reason than to clarify the existence of this intermediate state.\n\nStonesense: The check happens to be correct, as inactive units aren't visible. It can be noted that there's no debug string for the \"killed\" flag, and the string for the current \"dead\" flag is \"dead\".","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229263,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NDg0MjM0Mg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-394842342"},"message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229263,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjUyNzE0"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229436,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjUzODk1"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229725,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjU1Nzg2"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229843,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjU2Nzcw"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.\n- manipulator: We don't want inactive units to be manipulated either. Correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528229961,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjU3NjIw"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.\n- manipulator: We don't want inactive units to be manipulated either. Correct.\n- petcapRemover: We don't want inactive units involved in procreation. Correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528230117,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjU4Nzc1"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.\n- manipulator: We don't want inactive units to be manipulated either. Correct.\n- petcapRemover: We don't want inactive units involved in procreation. Correct.\n- rendermax_light: I can't see why inactive units would emit light. Correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528230229,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjU5NzA4"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.\n- manipulator: We don't want inactive units to be manipulated either. Correct.\n- petcapRemover: We don't want inactive units involved in procreation. Correct.\n- rendermax_light: I can't see why inactive units would emit light. Correct.\n- siege-engine: Neither dead nor inactive units should be targets. Correct.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528230541,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDkzMjYxODY2"},"target":"4627f4bd5bf15fea07dffe87ff54cb198cd0c149d12c7498918fb416e8ee1482","message":"- advtools: Same logic as for Units;isDead, with the same question about ghosts. While it's probably not possible for companions to be inactive, the correct flag should be used.\n- cursecheck: Should probably always filter out inactive units, in which case the checks should be against flags2.killed. The ghost issue crops up here as well, though.\n- diggingInvaders: We don't want either inactive or dead units, so the check is correct.\n- dwarfvet: We don't want either inactive or dead units, so the checks are correct.\n- labormanager: Looks correct. We don't want either inactive or dead units in either check.\n- manipulator: We don't want inactive units to be manipulated either. Correct.\n- petcapRemover: We don't want inactive units involved in procreation. Correct.\n- rendermax_light: I can't see why inactive units would emit light. Correct.\n- siege-engine: Neither dead nor inactive units should be targets. Correct.\n- tweak: I'm not convinced clear-ghostly kills ghosts properly. However, I'm not sure how to kill properly. \"exterminate\" sets a flag to time things out and have DF kill units (presumably so dependencies can be cleared in a controlled manner). Need expert advice.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528371269,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NTM4ODgzMw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-395388833"},"message":"Dealing with Units.h/cpp is messy, as any changes will have ripple effects onto the files using the modified functions.\nThere is already an isUndead function (at a different place in the file), but curiously enough, it's possible for a unit to be classified as both isAlive and isUndead if unit-\u003ecurse.add_tags1.bits.OPPOSED_TO_LIFE is set but unit-\u003ecurse.add_tags1.bits.NOT_LIVING is not, although I don't know if it happens in practice . Also, isUndead returns \"true\" even if the undead is dead, i.e. has been killed.\n\nAs indicated two posts up, I would change isAlive and isDead to check \"killed\" rather than \"dead\" and add an \"isActive\" function. \"isUndead\" would get an additional check to determine that the unit hasn't been killed. These changes would have \"isAlive\", \"isDead\", and \"isUndead\" (as well as \"isSane\") check only the explicit condition in their names, requiring an additional check against \"isActive\" if that is desired. This is a change of the functionality of \"isAlive\", \"isDead\", and \"isSane\" which currently return \"false\" for inactive units, but no change on that condition for \"isUndead\", but that function would be changed to filter out dead undead.\n\nLeaving Units unchanged is not really an option, as it's inconsistent in the current state.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528378844,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NTQyNDA0OQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-395424049"},"message":"I don't think isUndead needs to be changed. It's a trait like isGay, isTrained, isMerchant, etc. that is still relevant after death.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528379477,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NTQyNzQ0NA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-395427444"},"message":"OK, I accept that argument, but that leaves another quirk, namely that a ghost is considered to be dead as well as undead, but you'd have to use isActive to determine that it's actually an ex ghost.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528380314,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NTQzMjQwMA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-395432400"},"message":"That sounds accurate to me. Do we need an `isGhost()`? I fail to see how isActive would help if a ghost is visible, as that would mean the ghost is active.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528381768,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NTQ0MTUwMw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-395441503"},"message":"Yes, an isGhost would be useful but not critical. (isDead and isUndead) =\u003e it's a ghost. Add isActive to that and you can determine whether it's \"active\" or not. However, there's no reason to force users to figure that out by themselves.\n\nIt's true isActive wouldn't be of use for something you select, but there's a fair bit of processing of the units in units.all and units.active as well.\n\nThe remaining hole I now see is to distinguish between an inactive ghost (e.g. on the way off map on a raid, if that's how raids are implemented and ghosts can be assigned to squads, which I think someone reported doing), and a \"dead\" one. I can't see a situation where you'd want to process either case, though, but DFHackers are ingenious...","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528622593,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjAzNDIzNw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396034237"},"message":"If my searching is correct, the following code contains one of the strings isAlive, isDead, isUndead, or isSane (which are the names of Units functions modified by pull request 1297).\n- RemoteTools.cpp\n- dwarfmonitor.cpp\n- zone.cpp\n- buildingplan-lib.cpp\n- misery.cpp\n- RemoteToos.cpp\n- lstring.c\n- lgc.c\n- lobject.h\n- lgc.h\nThe searches did not find any matches in scripts.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528649212,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjA2MzM4Nw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396063387"},"message":"Why do you care about isSane?\n\nAlso, \"isdead\" (not isDead) is present in lua. I found a couple results in scripts, so maybe you didn't search that folder?\n\n```\n$ egrep -nr 'isAlive|isDead|isUndead|isSane' scripts\nscripts/emigration.lua:65:        or dfhack.units.isDead(unit)\nscripts/emigration.lua:73:        or dfhack.units.isSane(unit)\nscripts/emigration.lua:75:        or not dfhack.units.isDead(unit)\nscripts/emigration.lua:96:        if dfhack.units.isSane(unit)\nscripts/emigration.lua:97:        and not dfhack.units.isDead(unit)\nscripts/gui/family-affairs.lua:66:        if dfhack.units.isSane(spouse) then\nscripts/gui/family-affairs.lua:69:        if dfhack.units.isSane(spouse) == false then\nscripts/gui/family-affairs.lua:73:        if dfhack.units.isSane(df.unit.find(source.relationship_ids.Lover)) then\nscripts/gui/family-affairs.lua:76:        if dfhack.units.isSane(df.unit.find(source.relationship_ids.Lover)) == false then\nscripts/gui/family-affairs.lua:281:    if dfhack.units.isCitizen(selected) and dfhack.units.isSane(selected) then\nscripts/gui/unit-info-viewer.lua:752: if i.missing then --dfhack.units.isDead(unit)\n```\nThe last one is in a comment but could be reviewed too.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528650400,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjA2NDg0OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396064848"},"message":"isSane is using modified functions, and so users of that may be affected.\n\nFor lua I looked at the documentation (https://dfhack.readthedocs.io/en/latest/docs/Lua%20API.html#units-module), which claims the operations are spelled the same as the C(++) ones, e.g. \"dfhack.units.isDead(unit)\", which matches what you've found.\n\nMy search was on the \"dfhack\" folder generated by cloning DFHack, so the scripts folder (and sub folders) should have been included. However, there's a reason I don't trust Windoze's search function. Maybe it didn't like to look at lua file contents this time (it's happened before).","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528650852,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjA2NTU5Mg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396065592"},"message":"Did you remember to initialize submodules or clone with --recursive? If not, the scripts folder will be empty.\n\nA more complete search: \n```\n$ egrep -nr 'isAlive|isDead|isUndead|isSane' scripts plugins library\nscripts/emigration.lua:65:        or dfhack.units.isDead(unit)\nscripts/emigration.lua:73:        or dfhack.units.isSane(unit)\nscripts/emigration.lua:75:        or not dfhack.units.isDead(unit)\nscripts/emigration.lua:96:        if dfhack.units.isSane(unit)\nscripts/emigration.lua:97:        and not dfhack.units.isDead(unit)\nscripts/gui/family-affairs.lua:66:        if dfhack.units.isSane(spouse) then\nscripts/gui/family-affairs.lua:69:        if dfhack.units.isSane(spouse) == false then\nscripts/gui/family-affairs.lua:73:        if dfhack.units.isSane(df.unit.find(source.relationship_ids.Lover)) then\nscripts/gui/family-affairs.lua:76:        if dfhack.units.isSane(df.unit.find(source.relationship_ids.Lover)) == false then\nscripts/gui/family-affairs.lua:281:    if dfhack.units.isCitizen(selected) and dfhack.units.isSane(selected) then\nscripts/gui/unit-info-viewer.lua:752: if i.missing then --dfhack.units.isDead(unit)\nplugins/buildingplan-lib.cpp:303:        if (DFHack::Units::isDead(unit))\nplugins/df-ai/ai.cpp:555:        if (Units::isAlive(u) \u0026\u0026 Units::getPosition(u).isValid() \u0026\u0026\nplugins/df-ai/stocks.cpp:1473:            if (u \u0026\u0026 Units::isCitizen(u) \u0026\u0026 Units::isDead(u))\nplugins/df-ai/stocks.cpp:2527:            if (Units::isCitizen(*u) \u0026\u0026 !Units::isDead(*u) \u0026\u0026 (*u)-\u003estatus.labors[unit_labor::HUNT])\nplugins/dwarfmonitor.cpp:341:            if (Units::isDead(unit))\nplugins/dwarfmonitor.cpp:586:            if (Units::isDead(unit))\nplugins/dwarfmonitor.cpp:1375:            if (DFHack::Units::isDead(unit))\nplugins/dwarfmonitor.cpp:1791:        if (DFHack::Units::isDead(unit))\nplugins/misery.cpp:47:    if (Units::isDead(unit))\nplugins/zone.cpp:792:    if( !isDead(unit) \u0026\u0026 !isUndead(unit)\nplugins/zone.cpp:2082:            if (isDead(unit) || isUndead(unit)) {\nplugins/zone.cpp:3035:        if(    isDead(unit)\nplugins/zone.cpp:3036:            || isUndead(unit)\nplugins/zone.cpp:3276:        if(    isDead(unit)\nplugins/zone.cpp:3277:            || isUndead(unit)\nplugins/zone.cpp:3305:        if(    isDead(unit)\nplugins/zone.cpp:3306:            || isUndead(unit)\nplugins/zone.cpp:3342:        if(    isDead(unit)\nplugins/zone.cpp:3343:            || isUndead(unit)\nplugins/zone.cpp:3379:        if(    isDead(unit)\nplugins/zone.cpp:3380:            || isUndead(unit)\nplugins/zone.cpp:3407:        if(    isDead(unit)\nplugins/zone.cpp:3408:            || isUndead(unit)\nplugins/zone.cpp:3442:        if(    isDead(unit)\nplugins/zone.cpp:3443:            || isUndead(unit)\nlibrary/include/modules/Units.h:108:DFHACK_EXPORT bool isDead(df::unit *unit);\nlibrary/include/modules/Units.h:109:DFHACK_EXPORT bool isAlive(df::unit *unit);\nlibrary/include/modules/Units.h:110:DFHACK_EXPORT bool isSane(df::unit *unit);\nlibrary/include/modules/Units.h:148:DFHACK_EXPORT bool isUndead(df::unit* unit);\nlibrary/LuaApi.cpp:1588:    WRAPM(Units, isDead),\nlibrary/LuaApi.cpp:1589:    WRAPM(Units, isAlive),\nlibrary/LuaApi.cpp:1590:    WRAPM(Units, isSane),\nlibrary/LuaApi.cpp:1635:    WRAPM(Units, isUndead),\nlibrary/modules/Units.cpp:387:bool Units::isDead(df::unit *unit)\nlibrary/modules/Units.cpp:395:bool Units::isAlive(df::unit *unit)\nlibrary/modules/Units.cpp:404:bool Units::isSane(df::unit *unit)\nlibrary/modules/Units.cpp:408:    if (isDead(unit) ||\nlibrary/modules/Units.cpp:449:    if (!isSane(unit))\nlibrary/modules/Units.cpp:1562:bool Units::isUndead(df::unit* unit)\nlibrary/RemoteTools.cpp:597:            if (in-\u003ehas_dead() \u0026\u0026 Units::isDead(unit) != in-\u003edead())\nlibrary/RemoteTools.cpp:599:            if (in-\u003ehas_alive() \u0026\u0026 Units::isAlive(unit) != in-\u003ealive())\nlibrary/RemoteTools.cpp:601:            if (in-\u003ehas_sane() \u0026\u0026 Units::isSane(unit) != in-\u003esane())\n```","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528655728,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjA3MTA0Nw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396071047"},"message":"Yes. It's where I've done the script changes, so I'm sure it exists.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528883255,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5Njg3ODE5MQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396878191"},"message":"- RemoteTools.cpp: The command_result function is affected. I would add a check to skip all inactive units that are not killed. However, I don't know how this function is used. The proposed change would cause a check for only race and/or civ id to remove inactive units that aren't dead, while those would have been included (as I guess not by intention) previously. I suspect you don't want to match inactive units that haven't been inactivated by death, however.\n- dwarfmonitor.cpp:\n  - populateFortColumn: I suspect you also want to remove inactive non dead units (e.g. dorfs sent out on raids). Adding that check would retain the current behavior.\n  - populatePreferencesColumn:  Ditto.\n  - update_dwarf_stats: Ditto.\n- zone.cpp:\n  - First occurrence: exclude inactive to retain functionality.\n  - autoButcher: exclude inactive to retain functionality (butcher marked war animals taken on raids?)\n  - checkRaceStocksTotal: Ditto, but targets would also include inbound animals caught in raids.\n  - checkRaceStocksProtected: Ditto\n  - checkRaceStocksButcherable: Ditto\n  - checkRaceStocksButcherFlag: Ditto\n  - butcherRace: Ditto\n  - unbutcherRace: Ditto, but could argue butcher flags on returning war animals should be removed as well. However, that should probably be done as an explicit change if desired.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528883255,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk2NDM3OTA1"},"target":"cb24a791961fe736a4466badde65683f674f2f296921872ad3b8bdd478d340bb","message":"- RemoteTools.cpp: The command_result function is affected. I would add a check to skip all inactive units that are not killed. However, I don't know how this function is used. The proposed change would cause a check for only race and/or civ id to remove inactive units that aren't dead, while those would have been included (as I guess not by intention) previously. I suspect you don't want to match inactive units that haven't been inactivated by death, however.\n- dwarfmonitor.cpp:\n  - populateDwarfColumn: I suspect you also want to remove inactive non dead units (e.g. dorfs sent out on raids). Adding that check would retain the current behavior.\n  - populateFortColumn: Ditto\n  - populatePreferencesColumn:  Ditto.\n  - update_dwarf_stats: Ditto.\n- zone.cpp:\n  - First occurrence: exclude inactive to retain functionality.\n  - autoButcher: exclude inactive to retain functionality (butcher marked war animals taken on raids?)\n  - checkRaceStocksTotal: Ditto, but targets would also include inbound animals caught in raids.\n  - checkRaceStocksProtected: Ditto\n  - checkRaceStocksButcherable: Ditto\n  - checkRaceStocksButcherFlag: Ditto\n  - butcherRace: Ditto\n  - unbutcherRace: Ditto, but could argue butcher flags on returning war animals should be removed as well. However, that should probably be done as an explicit change if desired.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528883529,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk2NDM5ODMx"},"target":"cb24a791961fe736a4466badde65683f674f2f296921872ad3b8bdd478d340bb","message":"- RemoteTools.cpp: The command_result function is affected. I would add a check to skip all inactive units that are not killed. However, I don't know how this function is used. The proposed change would cause a check for only race and/or civ id to remove inactive units that aren't dead, while those would have been included (as I guess not by intention) previously. I suspect you don't want to match inactive units that haven't been inactivated by death, however.\n- dwarfmonitor.cpp:\n  - populateDwarfColumn: I suspect you also want to remove inactive non dead units (e.g. dorfs sent out on raids). Adding that check would retain the current behavior.\n  - populateFortColumn: Ditto\n  - populatePreferencesColumn:  Ditto.\n  - update_dwarf_stats: Ditto.\n- zone.cpp:\n  - isFreeEgglayer: Exclude inactive to retain functionality. Could also change to just return check, rather than return true on success and false on failure.\n  - way down in command_result: exclude inactive to retain functionality.\n  - autoButcher: exclude inactive to retain functionality (butcher marked war animals taken on raids?)\n  - checkRaceStocksTotal: Ditto, but targets would also include inbound animals caught in raids.\n  - checkRaceStocksProtected: Ditto\n  - checkRaceStocksButcherable: Ditto\n  - checkRaceStocksButcherFlag: Ditto\n  - butcherRace: Ditto\n  - unbutcherRace: Ditto, but could argue butcher flags on returning war animals should be removed as well. However, that should probably be done as an explicit change if desired.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528892663,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk2NDk3OTY2"},"target":"cb24a791961fe736a4466badde65683f674f2f296921872ad3b8bdd478d340bb","message":"- RemoteTools.cpp: The ListUnits function is affected. I would add a check to skip all inactive units that are not killed. However, I don't know how this function is used. The proposed change would cause a check for only race and/or civ id to remove inactive units that aren't dead, while those would have been included (as I guess not by intention) previously. I suspect you don't want to match inactive units that haven't been inactivated by death, however.\n- dwarfmonitor.cpp:\n  - populateDwarfColumn: I suspect you also want to remove inactive non dead units (e.g. dorfs sent out on raids). Adding that check would retain the current behavior.\n  - populateFortColumn: Ditto\n  - populatePreferencesColumn:  Ditto.\n  - update_dwarf_stats: Ditto.\n- zone.cpp:\n  - isFreeEgglayer: Exclude inactive to retain functionality. Could also change to just return check, rather than return true on success and false on failure.\n  - way down in command_result: exclude inactive to retain functionality.\n  - autoButcher: exclude inactive to retain functionality (butcher marked war animals taken on raids?)\n  - checkRaceStocksTotal: Ditto, but targets would also include inbound animals caught in raids.\n  - checkRaceStocksProtected: Ditto\n  - checkRaceStocksButcherable: Ditto\n  - checkRaceStocksButcherFlag: Ditto\n  - butcherRace: Ditto\n  - unbutcherRace: Ditto, but could argue butcher flags on returning war animals should be removed as well. However, that should probably be done as an explicit change if desired.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528891937,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjkxNTYxMw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396915613"},"message":"command_result is a return type, not a function name. Multiple functions return that type.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528892628,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NjkxODU2NQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-396918565"},"message":"True. Sloppy reading on my part. It should be ListUnits.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528919270,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzA2MjYzOA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397062638"},"message":"@BenLubar pointed out that `git grep` works well here (and you could probably use it too!).\nHere's some better output. I think you've handled most of this. There's a thing in the ruby plugin that should probably be changed (in unit.rb; it already handles left/incoming units, but should probably check the killed flag).\n\n`git grep -nE 'flags1.bits.dead|flags1.dead|isDead'`\n```\ndocs/Lua API.rst:1186:* ``dfhack.units.isDead(unit)``\nlibrary/LuaApi.cpp:1588:    WRAPM(Units, isDead),\nlibrary/RemoteTools.cpp:597:            if (in-\u003ehas_dead() \u0026\u0026 Units::isDead(unit) != in-\u003edead())\nlibrary/include/modules/Units.h:108:DFHACK_EXPORT bool isDead(df::unit *unit);\nlibrary/modules/EventManager.cpp:540:        if ( ! unit-\u003eflags1.bits.dead ) {\nlibrary/modules/EventManager.cpp:679:        if ( unit-\u003eflags1.bits.dead )\nlibrary/modules/EventManager.cpp:726:        /*if ( unit-\u003eflags1.bits.dead )\nlibrary/modules/EventManager.cpp:930:        if ( unit1-\u003eflags1.bits.dead ) {\nlibrary/modules/EventManager.cpp:942:        if ( unit2-\u003eflags1.bits.dead ) {\nlibrary/modules/EventManager.cpp:955:            //if ( unit1-\u003eflags1.bits.dead || unit2-\u003eflags1.bits.dead )\nlibrary/modules/Units.cpp:387:bool Units::isDead(df::unit *unit)\nlibrary/modules/Units.cpp:408:    if (isDead(unit) ||\nlibrary/modules/Units.cpp:1582:    return !unit-\u003eflags1.bits.dead;\nplugins/advtools.cpp:485:    if (unit-\u003eflags1.bits.dead)\nplugins/buildingplan-lib.cpp:303:        if (DFHack::Units::isDead(unit))\nplugins/cursecheck.cpp:164:        if(unit-\u003eflags1.bits.dead \u0026\u0026 ignoreDead)\nplugins/cursecheck.cpp:220:                    unit-\u003eflags1.bits.dead ? \"deceased\" : \"active\",\nplugins/diggingInvaders/diggingInvaders.cpp:392:            if ( unit-\u003eflags1.bits.dead )\nplugins/dwarfmonitor.cpp:341:            if (Units::isDead(unit))\nplugins/dwarfmonitor.cpp:586:            if (Units::isDead(unit))\nplugins/dwarfmonitor.cpp:1375:            if (DFHack::Units::isDead(unit))\nplugins/dwarfmonitor.cpp:1791:        if (DFHack::Units::isDead(unit))\nplugins/dwarfvet.cpp:386:        if (!real_unit || real_unit-\u003eflags1.bits.dead || !real_unit-\u003ehealth-\u003eflags.bits.needs_healthcare) {\nplugins/dwarfvet.cpp:627:        if ( unit-\u003eflags1.bits.dead || unit-\u003eflags1.bits.active_invader || unit-\u003eflags2.bits.underworld || unit-\u003eflags2.bits.visitor_uninvited || unit-\u003eflags2.bits.visitor ) {\nplugins/labormanager/labormanager.cpp:1227:                        if (other \u0026\u0026 !(other-\u003eflags1.bits.dead ||\nplugins/labormanager/labormanager.cpp:1250:                        !(*u2)-\u003eflags1.bits.dead \u0026\u0026\nplugins/manipulator.cpp:1160:        if (unit-\u003eflags1.bits.dead)\nplugins/misery.cpp:47:    if (Units::isDead(unit))\nplugins/petcapRemover.cpp:67:        if ( unit-\u003eflags1.bits.dead || unit-\u003eflags1.bits.active_invader || unit-\u003eflags2.bits.underworld || unit-\u003eflags2.bits.visitor_uninvited || unit-\u003eflags2.bits.visitor )\nplugins/rendermax/renderer_light.cpp:801:            if(def \u0026\u0026 !u-\u003eflags1.bits.dead)\nplugins/ruby/unit.rb:60:            return :Dead if u.flags1.dead\nplugins/ruby/unit.rb:135:            # return true if u.flags3.ghostly and not u.flags1.dead\nplugins/siege-engine.cpp:1346:    if (unit-\u003eflags1.bits.dead ||\nplugins/tweak/tweak.cpp:834:            unit-\u003eflags1.bits.dead = 1;\nplugins/zone.cpp:792:    if( !isDead(unit) \u0026\u0026 !isUndead(unit)\nplugins/zone.cpp:2082:            if (isDead(unit) || isUndead(unit)) {\nplugins/zone.cpp:3035:        if(    isDead(unit)\nplugins/zone.cpp:3276:        if(    isDead(unit)\nplugins/zone.cpp:3305:        if(    isDead(unit)\nplugins/zone.cpp:3342:        if(    isDead(unit)\nplugins/zone.cpp:3379:        if(    isDead(unit)\nplugins/zone.cpp:3407:        if(    isDead(unit)\nplugins/zone.cpp:3442:        if(    isDead(unit)\n```\n\n`git -C scripts grep -nE 'flags1.bits.dead|flags1.dead|isDead'`\n```\nadaptation.rb:60:    next if u.flags1.dead\ndeathcause.rb:61:    if unit and not unit.flags1.dead and not unit.flags3.ghostly\ndevel/export-dt-ini.lua:493:    { 'Dead, Jim.', { df.unit_flags1.dead } },\nemigration.lua:67:        or dfhack.units.isDead(unit)\nemigration.lua:77:        or not dfhack.units.isDead(unit)\nemigration.lua:99:        and not dfhack.units.isDead(unit)\nexterminate.rb:67:    not u.flags1.dead and\nexterminate.rb:79:            if u.flags1.dead\nfix/dead-units.lua:20:    if flags1.dead and flags2.killed and unit.race ~= dwarf_race then\nfix/feeding-timers.lua:20: if dfhack.units.isCitizen(unit) and not (unit.flags1.dead) then\nfix/retrieve-units.lua:41:        if unit.flags1.dead and shouldRetrieve(unit) then\nfix/retrieve-units.lua:47:            unit.flags1.dead = false\nfix/stuck-merchants.lua:48:        if u.flags1.merchant and u.flags1.dead then\nfull-heal.lua:58:        if unit.flags1.dead then\nfull-heal.lua:63:        unit.flags1.dead = false\nghostly.lua:17:    if unit.flags1.dead then\nghostly.lua:18:        unit.flags1.dead = false\nghostly.lua:21:        unit.flags1.dead = true\ngui/room-list.lua:144:       and sel_item.can_use and not sel_item.owner.flags1.dead\ngui/unit-info-viewer.lua:411: self.dead = u.flags1.dead\ngui/unit-info-viewer.lua:752: if i.missing then --dfhack.units.isDead(unit)\nstarvingdead.rb:35:            if (u.enemy.undead and not u.flags1.dead)\nstarvingdead.rb:44:                    u.flags1.dead = true\nsuperdwarf.rb:32:                    if u = df.unit_find(id) and not u.flags1.dead\nwarn-starving.lua:123:        if rraw and not unit.flags1.dead and not dfhack.units.isOpposedToLife(unit) then\n```","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528972007,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzIzMzc4Mw==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397233783"},"message":"BenLubar's suggestion gratefully accepted.\n\n- plugins/ruby/unit.rb:60:            return :Dead if u.flags1.dead\n  Since I don't know ruby I don't trust myself changing it. As far as I can see, there should be two changes:\n  - Line 60 should be changed to use flags2.killed instead.\n  - Line 58 should be extended to also abort when (u.flags1.dead and not u.flags2.killed) is true. I guess this can also be added as a new row as an alternative.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528972007,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk2OTc4ODc2"},"target":"6ccc07cef7530a8089aeed26cc85640e852b464aefc52208ddde46720f8af507","message":"BenLubar's suggestion gratefully accepted.\n\n- plugins/ruby/unit.rb:60:            return :Dead if u.flags1.dead\n  Since I don't know ruby I don't trust myself changing it. As far as I can see, there should be two changes:\n  - Line 60 should be changed to use flags2.killed instead.\n  - Line 58 should be extended to also abort when (u.flags1.dead and not u.flags2.killed) is true. I guess this can also be added as a new row as an alternative.\n\nEdit: Looking at tweak.cpp again, I strongly suspect the logic is incorrect. As far as I can see the function just hides a ghost by making it inactive (while also making it a non-ghost). If what I've understood is correct, a killed ghost is both inactive and killed (reports indicating the ghost flag remains set, affecting legends retroactively). However, I still don't know if the procedure for killing a normal unit (as used by exterminate) would work on a ghost as well.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528985792,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzMxMTkzMQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397311931"},"message":"clear-ghostly probably works. I don't think there's a way to \"kill\" ghosts normally in vanilla DF (without putting them to rest), but given how long it has been around, I'd be surprised if it didn't work.\nI can handle the Ruby change. You didn't notice any others in the most recent list that were missed earlier, did you?","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989223,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzMyOTM0OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397329348"},"message":"How can you tell if a ghost removed by the script is killed? As far as I can understand, the ghost is set to inactive, and thus will cease to affect anything in DF, but so did the units that disappeared incorrectly through fix/dead-units, with the obvious difference that the ghost is not supposed to ever reappear. However, I can understand if just shuffling it into a cupboard that's never opened is sufficiently good: it's probably not causing any harm.\n\nI went through every unit on my git grep list (I added the other changed functions to the search as well), and as you saw it also resulted in the update of the files in PR 1307.\n\nHowever, these entries from your search above were not caught, so I'll have to take a look at those:\nplugins/df-ai/ai.cpp:555:        if (Units::isAlive(u) \u0026\u0026 Units::getPosition(u).isValid() \u0026\u0026\nplugins/df-ai/stocks.cpp:1473:            if (u \u0026\u0026 Units::isCitizen(u) \u0026\u0026 Units::isDead(u))\nplugins/df-ai/stocks.cpp:2527:            if (Units::isCitizen(*u) \u0026\u0026 !Units::isDead(*u) \u0026\u0026 (*u)-\u003estatus.labors[unit_labor::HUNT])","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989223,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk3MDk0OTc2"},"target":"23fc370e613e85296063b34b5e4117af38da1680ec22b61b18d43477e652528a","message":"How can you tell if a ghost removed by the script is killed? As far as I can understand, the ghost is set to inactive, and thus will cease to affect anything in DF, but so did the units that disappeared incorrectly through fix/dead-units, with the obvious difference that the ghost is not supposed to ever reappear. However, I can understand if just shuffling it into a cupboard that's never opened is sufficiently good: it's probably not causing any harm.\n\nI went through every unit on my git grep list (I added the other changed functions to the search as well), and as you saw it also resulted in the update of the files in PR 1307.\n\nHowever, these entries from your search above were not caught, so I'll have to take a look at those:\nplugins/df-ai/ai.cpp:555:        if (Units::isAlive(u) \u0026\u0026 Units::getPosition(u).isValid() \u0026\u0026\nplugins/df-ai/stocks.cpp:1473:            if (u \u0026\u0026 Units::isCitizen(u) \u0026\u0026 Units::isDead(u))\nplugins/df-ai/stocks.cpp:2527:            if (Units::isCitizen(*u) \u0026\u0026 !Units::isDead(*u) \u0026\u0026 (*u)-\u003estatus.labors[unit_labor::HUNT])","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989250,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk3MDk1MTgy"},"target":"23fc370e613e85296063b34b5e4117af38da1680ec22b61b18d43477e652528a","message":"How can you tell if a ghost removed by the script is killed? As far as I can understand, the ghost is set to inactive, and thus will cease to affect anything in DF, but so did the units that disappeared incorrectly through fix/dead-units, with the obvious difference that the ghost is not supposed to ever reappear. However, I can understand if just shuffling it into a cupboard that's never opened is sufficiently good: it's probably not causing any harm.\n\nI went through every unit on my git grep list (I added the other changed functions to the search as well), and as you saw it also resulted in the update of the files in PR 1298.\n\nHowever, these entries from your search above were not caught, so I'll have to take a look at those:\nplugins/df-ai/ai.cpp:555:        if (Units::isAlive(u) \u0026\u0026 Units::getPosition(u).isValid() \u0026\u0026\nplugins/df-ai/stocks.cpp:1473:            if (u \u0026\u0026 Units::isCitizen(u) \u0026\u0026 Units::isDead(u))\nplugins/df-ai/stocks.cpp:2527:            if (Units::isCitizen(*u) \u0026\u0026 !Units::isDead(*u) \u0026\u0026 (*u)-\u003estatus.labors[unit_labor::HUNT])","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528988958,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzMzMDI3NQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397330275"},"message":"Oops, df-ai shouldn't have shown up. That's one of @BenLubar's plugins, but it's not tracked, and I thought `git grep` only searched tracked files.\n\n(He'll probably want to double-check those cases, but it's not something you need to care about.)","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989071,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzMzMDgyMg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397330822"},"message":"Yes, I just looked and scratched my head since I couldn't find them on my machine...\n\nWell. No to scripts, then.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989071,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk3MDkzNjgx"},"target":"fc07a85378da607fdc52af30ef2d3b904ca1a3ca00a0a752d010ce2522f42a3b","message":"Yes, I just looked and scratched my head since I couldn't find them on my machine...\n\nWell. ON to scripts, then.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989076,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk3MDkzNzE2"},"target":"fc07a85378da607fdc52af30ef2d3b904ca1a3ca00a0a752d010ce2522f42a3b","message":"Yes, I just looked and scratched my head since I couldn't find them on my machine...\n\nWell. On to scripts, then.","files":null},{"type":6,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528989209,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk3MDk0ODU5"},"target":"fc07a85378da607fdc52af30ef2d3b904ca1a3ca00a0a752d010ce2522f42a3b","message":"Yes, I just looked and scratched my head since I couldn't find them on my machine...\n\nWell. On to scripts, then.\n\nAnd my comment above was incorrect. It should reference 1298.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528990920,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM0MTY0Ng==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397341646"},"message":"And something different: I just updated my DF 0.44.10 installation with the latest develop using the installation-debug bat script. Previously I've gotten hordes of \"deprecated feature used: update\" warnings, but now I get 224 warnings, most or all saying \"cl : command line warning D9002: ignoring unknown option 'std:c++11'...\", where \"...\" is a reference to the project it complains about (including embark-assistant). Is that a sign of addressing the deprecated feature issue didn't work properly for Windoze, or is it a sign of my VC installation needing an update (which I'm not looking forward to, given that the current one only barely works)?","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528991287,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM0MzY1OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397343658"},"message":"What VC version are you using? It's something from VS2015, right?\n\nWe fixed a lot of warnings recently, maybe after 0.44.10-r1. DFHack/dfhack#1301 changed how we ask for C++11 support, but it was requested before using compiler flags, I think. It didn't produce any warnings on BuildMaster, so I'm not sure what's going on.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528991438,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM0NDUzOA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397344538"},"message":"Okay, `/std:c++11` isn't actually valid: https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/\n(so you must be using CMake \u003c 3.10, which is when `/std:c++11` is used as a fallback. That's fine, but probably explains why you got that warning but BuildMaster didn't.)","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528992572,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM1MDQ1NQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397350455"},"message":"I'm using VC 2015 since the instructions said newer versions wouldn't work. CMake comes from Chocolatey as of whatever version https://chocolatey.org provided when I installed it, which wasn't a huge time ago (probably August 13 2017, as that's the date of the chocolatey folder under program data).\n\nAnyway, unless I misread things, emmigration.lua, operation canLeave (line 58), doesn't work. It checks for both isDead and not isDead, for instance. It looks like the first half is reasons for not being eligible to leave, while isCitizen onwards seem to be reason to allow it to leave (I haven't checked what profession 103 is, but given the logic, it could be baby or child).\nAlso, it doesn't make sense to forbid non dwarves to leave as visitors can now join the fortress.\nI'd like to remove the race check and reverse the isCitizen and isSane conditions, change the profession check to \"==\" (after checking the profession and using the enum name), replace the isDead check with \"not isActive\", and remove the \"not isDead\" check.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528993115,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM1MzUxNg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397353516"},"message":"I think the `or not dfhack.units.isDead(unit)` line should be removed. Not sure how that ever could have worked, but feel free to change it.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528994187,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM1OTIxNg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397359216"},"message":"What about isCitizen and isSane and the child check? As I read it those checks would mean citizens and sane adult and baby dorfs couldn't emigrate (103 is child, and 104 is baby).\nOnly insane dwarven children who are members of the civ but are not nor citizens can leave?\nI doubt it has worked since this function was changed to the current state.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528995437,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM2NTY5NQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397365695"},"message":"The current state is mostly what was imported in dfhack/dfhack#730, with some later name changes to make it work at all without errors (e.g. changing `u` to `unit`). I don't know where the imported version came from, but it can't have been the one that worked in 0.34.11.\n\nThe check should probably exclude babies and children, but please use a library function to check that (or at least don't use magic numbers for professions). It should probably exclude (instead of include) insane dwarves too, since the point is that sane dwarves are choosing to leave.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1528997937,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM3ODQzNg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397378436"},"message":"I managed to locate a CMake version indication in the chocolatey directory, and it says 3.9.1, so I guess I should try to reinstall it or upgrade it, but I won't risk that before this exercise is done.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1528998315,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzM4MDMyMQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397380321"},"message":"I'm going to get rid of the /std:c++11 flag, so the warning should go away. Feel free to upgrade CMake if you want, but it's not your fault and you don't strictly need to. (Not that upgrading is bad, of course.)","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1529004581,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzQxMTY2OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397411668"},"message":"I've modified emigration.lua to work (i.e. not blow up) when run in a fortress, but the random fortress used might not have sufficiently stressed dwarves. I had to add a check against a non existent soul. It's been added to the Dead misuse DFHack/scripts#62 PR.\n\nI don't think ghostly.lua is correct when it comes to the non standard paths through the script, but still don't know how adventure mode handles dead players, and have no idea what happens if you make them inactive.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529004906,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzQxMzE3OA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397413178"},"message":"It would be pretty hard to select an off-map inactive unit in adventure mode, so I think `ghostly` is fine.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1529005511,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5NzQxNjAxMg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-397416012"},"message":"I suspect it might not be possible to get to the two non standard paths, so I agree it's probably fine functionally.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529556382,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODk3NDc1NA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-398974754"},"message":"Ok, so the next step is to rename `dead` to `inactive`. I'll do that tomorrow.","files":null},{"type":4,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529591904,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTY5MzgzOTcwOA=="},"status":2},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1529592234,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTEyODgyMA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399128820"},"message":"Well, there's still the matter of renaming all remaining uses of the flag in scripts and code to close the matter completely.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529592436,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTEzMDA1Ng==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399130056"},"message":"I know, I'm doing that","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529593353,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTEzNTU5Mg==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399135592"},"message":"Changes to unit.h (including dependencies like unit_flags1.h) require recompiling a lot, so that's why the DFHack change is taking a while.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529593661,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTEzNzM3MQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399137371"},"message":"Missed one in mousequery - luckily, it doesn't look like scripts are affected:\n```\n    df::unit_flags1 bad_flags;\n    bad_flags.whole = 0;\n    bad_flags.bits.dead = true;\n```","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1529594213,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTE0MDQ2OQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399140469"},"message":"Sneaky renaming... Serves them right that it blows up on them! Wait, you're the one it blows up in the face of ;)","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529594306,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTE0MTAxMQ==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399141011"},"message":"It's a fairly common pattern with item flags in some plugins, but this is the only place I've seen it done with unit flags.\n\nAnyway, I think this is actually done now with https://github.com/DFHack/dfhack/commit/7a5e7c7c86a70fbcdeb20403720345ecb2c52364","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1529594365,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTE0MTMyNA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399141324"},"message":"Got the commit message wrong, of course, but everything else looks ok to me.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1529594654,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5OTE0MzA0MA==","github-url":"https://github.com/DFHack/df-structures/issues/247#issuecomment-399143040"},"message":"A reasonably substantial refactoring of a single flag. Thanks for the cooperation!","files":null}]}