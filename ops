{"version":1,"ops":[{"type":5,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526055823,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE2MjIzMDQ1MzA="},"added":["research"],"removed":[]},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526055917,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQxNDIwOA==","github-url":"https://github.com/DFHack/df-structures/issues/206#issuecomment-388414208"},"message":"This seems reasonable, based on the little I know about how features work - want to add it? Any data is generally better than no data, and I trust your research here (although feel free to verify since it's been a while).","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526057325,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQyMDM4Ng==","github-url":"https://github.com/DFHack/df-structures/issues/206#issuecomment-388420386"},"message":"Some of the above is incorrect, according to later experience. It seems feature maps are unloaded dynamically as well. However, once data has been added they reappear when the hacked structure is reloaded, so it actually takes effect (if I remember correctly, adding a river at the end has it shown at the top when the structure is reloaded).\nThis functionality is used by the Biome Manipulator for river manipulation, as well as Candy Corrector for candy spires that go AWOL in world with less than 3 cavern layers. The data is read by the Embark Assistant. Given this, I think it's reasonably verified.\n\nI think I can produce such a PR.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526060077,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQzMjcwMA==","github-url":"https://github.com/DFHack/df-structures/issues/206#issuecomment-388432700"},"message":"Looking at this again, I could use some clarification. This is part of the generated C++ in world_data.h:\n```cpp\n    struct DFHACK_EXPORT T_feature_map {\n      int16_t x;\n      int16_t y;\n      struct DFHACK_EXPORT T_features {\n        std::vector\u003cdf::feature_init* \u003e feature_init[16][16];\n        int32_t unk[16][16][30];\n        static struct_identity _identity;\n      public:\n        T_features();\n      };\n      T_features* features;\n      int16_t* unk_8;\n      int32_t* unk_c;\n      static struct_identity _identity;\n    public:\n      T_feature_map();\n    };\n    T_feature_map** feature_map;\n```\nfeature_map is the field, T_feature_map is the type. As you can see, feature_map is a double pointer (basically a 2D array like you described) of T_feature_map instances. There are already a few map block things in world.map that follow a similar pattern. `feature_map[x][y].features` has a couple static 2D arrays inside it as well (which are easier to access, since you don't have to deal with null pointers).\n\nI think a comment that feature_map pointers are only non-null if they're needed would help, but other than that, I'm not sure if anything needs to be changed. Is there something else I'm missing?","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526062581,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQ0NDIzNw==","github-url":"https://github.com/DFHack/df-structures/issues/206#issuecomment-388444237"},"message":"It's purely a matter of adding comments, not changing the structure itself.","files":null},{"type":4,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526074367,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTYyMjgyNzIwOA=="},"status":2}]}