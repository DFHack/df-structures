{"version":1,"ops":[{"type":3,"author":{"id":"25c4158f5dcc139ae07acba5a747e2de0c904e43"},"timestamp":1516460419,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1OTE3NzM0NQ==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-359177345"},"message":"See also #72.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1516462827,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1OTE3OTk5NQ==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-359179995"},"message":"There seems to be some parallel contents in this adventure mode stuff that might be useful to track down parameters as one would assume they're used in the same way, but nothing that seems to directly involve the types discussed here. Once there's some actual info here I would guess it could be used the other way as well.\nanon_3 corresponding values have the relation \"worthlessness\" \u003c -10, \"value\" \u003e 10, \"nuances\" in between for fortress mode RealizeValue. GaveBirth only has boy/girl for single children, while multiples get twins/triples,...quindecaplets, and then \"many babies\" .\nOffice qualities are the same (and also applies to other rooms that use quality levels rather than value).\nGhostHaunt likewise have the same levels (the current XML list lacks one of the 4 values.\nSpouseGaveBirth actually works differently. 1 is getting married, 11 getting 1 or more siblings, and 12 is becoming a parent.\nNote that the comments above are fortress data. I don't know how that relates to adventure mode.\n\nEdit:\nMy script/research notes can be found here [https://github.com/PatrikLundell/scripts/blob/own_scripts/thoughts.lua](url). Note that it may be updated without any other indication than the version number inside it.","files":null},{"type":5,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526055598,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE2MjIyOTY0Mjg="},"added":["research"],"removed":[]},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526059686,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQzMDkxOQ==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388430919"},"message":"We can't \"convert\" emotion_type and unit_thought_type into a class hierarchy because they are both enums (think integers with fancy names for certain values). We can't make up our own \"emotion_type_spousegavebirthst\" type, for example, because DF doesn't have that - it has one emotion_type enum, where 1=ADORATION, 2=AFFECTION, etc..\n\nI'm not sure what you're referring to in df.units.xml - there's a thing in unit.personality.emotions that has a field of type emotion_type, but that's it. Again, the layout of that has to match DF's, although we can rename fields if we want.\n\nIf by \"emotion_type contains a couple of general purpose fields\" you mean the enum *attributes*, those are metadata that we've added (e.g. color and divider) that are useful in some way. You're welcome to add new enum-attr entries to link unit_thought_type and emotion_type somehow if there is an appropriate way to link them.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526068064,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODQ2NzczMw==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388467733"},"message":"I know C(++) doesn't have enums, just named constants that can be defined to look like they made up enums...\n\nAnyway, you're correct in that it's not emotion_type I'm actually after, but the nameless type making up the elements of the unit_personality.emotions vector. However, I guess this type can't be converted into a virtual class with subclasses determined by the \"type\" field either, although that would definitely be the best alternative if it was possible.\n\nAlternative 2 is a really bad one, as the union the nameless type would be converted into would be a really horrible mess to deal with. It should not be considered further.\n\nThis is what alternative 3 would look like:\nFor emotion_type, I really meant the attributes. This is what the element LearnTopic currently looks like (it's actually 0.44.07 which I have at hand locally, but I don't think it has changed):\n```xml\n        \u003cenum-item name='LearnTopic'\u003e\n            \u003citem-attr name='caption' value='after learning about [topic]'/\u003e\n            \u003citem-attr name='xml_caption' value='learned scholar flag'/\u003e\n        \u003c/enum-item\u003e\n```\nand this is what I'd change it to:\n```xml\n        \u003cenum-item name='LearnTopic'\u003e\n            \u003citem-attr name='caption' value='after learning about [subthought_severity]'/\u003e\n            \u003citem-attr name='subthought_severity' value='knowledge_scholar_category_flag index, flag index'/\u003e\n            \u003citem-attr name='xml_caption' value='learned scholar flag'/\u003e\n        \u003c/enum-item\u003e\n```\n\nThere would be three optional attributes, \"subthought\", \"severity\", and \"subthought_severity\" that would be present only if the corresponding token was in the caption. These attributes would try to indicate how the parameters are to be used, although they wouldn't be useful programmatically, only as a guide to people reading the attributes. Apart from these three tokens, the caption would continue to contain \"[he]\", \"[him]\", and \"[his]\". It would be possible to have both [subthought] and [severity] as in\n\"near a [severity] [subthought]\" for AdmireBuilding.\n\nI would also add an optional \"extended_caption\" attribute that would show the data that's actually there, but which DF only displays as the top thought (or not at all). It would use the same parameters, but the \"caption\" attribute wouldn't contain parameters not displayed.\ne.g. for MadeArtifact: \"caption\" = \"after creating an artifact\" and\n                                 \"extended_caption\" = \"after creating [subthought]\",\n\nThis is basically what I've got in thoughts.lua, although that actually contains functions to extract the appropriate values in it, but I don't see any reasonable way to get that into XML attributes.\n\nIt can also be noted that I haven't got a complete mapping of everything, but most of it is there.\n\nEdit: And I obviously still don't understand how to make code sections that actually display like code and get them to end...","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526109886,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODUzNjU3Ng==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388536576"},"message":"I've done some further thinking, and have come to the conclusion that making attributes for subthought, severity, and subthought_severity won't add anything that comments can't provide, so I think it's better to have the caption and optional extended_caption attributes, but provide the parameter information as comments instead.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1526133205,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODU1NjgwOA==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388556808"},"message":"I fixed your code sections - all of the triple backticks need to be on their *own* lines. You can edit your comment to see what I did.\n\nI don't think \"subthought_severity\" is a good name for that, and changing \"[topic]\" to \"[subthoughts_severity]\" in the caption attribute makes it harder to understand. I think at least one of the caption and xml_caption attributes was taken from a string dump or an XML export, so it would be good to keep those intact, but if additional data isn't useful programmatically, a comment might be a better way to go.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526135942,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODU1OTUzNw==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388559537"},"message":"I don't know what xml_caption is supposed to be, but suspect it might be the one taken from an XML export. The caption has a small number of spelling errors which indicates somebody has typed those.\n\nThese are examples of what I've done so far.\n```\n    \u003cenum-type type-name='emotion_type' base-type='int32_t'\u003e\n        \u003cenum-attr name='color' type-name='int8_t' default-value='7'/\u003e\n        \u003cenum-attr name='divider' type-name='int8_t' default-value='0'/\u003e\n        \u003cenum-attr name='feeling_type' type-name='int8_t' default-value='1'/\u003e\n        \u003cenum-attr name='text' default-value=''/\u003e\n        \u003cenum-attr name='prefix' default-value=''/\u003e\n       \u003ccomment\u003e\n            color: The color the thought is displayed as.\n            divider: Modifies the strength of a thought by the strength with the\n              divider to get the effective strength. A negative divider indicates it's\n              a positive, stress reducing, emotion.\n              A divider of 0 means there is no stress effect of the thought.\n            feeling_type: 1 means the feeling is expressed as \"is/was\", while\n              0 means it's expressed as \"feels/felt\", and -1 means nothing is\n              printed.\n            text: The text DF prints for the feeling.\n            prefix: a prefix that goes in between the feeling_type and the text, but\n              printed with the standard color, not the feeling one.\n        \u003c/comment\u003e\n\n        \u003cenum-item name='ANYTHING' value='-1'/\u003e\n            \u003citem-attr name='feeling_type' value='0'/\u003e\n            \u003citem-attr name='text' value='ANYTHING'/\u003e\n        \u003cenum-item name='ACCEPTANCE'\u003e\n            \u003citem-attr name='color' value='7'/\u003e\n            \u003citem-attr name='divider' value='-8'/\u003e\n            \u003citem-attr name='feeling_type' value='1'/\u003e\n            \u003citem-attr name='text' value='accepting'/\u003e\n        \u003c/enum-item\u003e\n        \u003cenum-item name='ADORATION'\u003e\n            \u003citem-attr name='color' value='11'/\u003e\n            \u003citem-attr name='divider' value='-1'/\u003e\n            \u003citem-attr name='feeling_type' value='0'/\u003e\n            \u003citem-attr name='text' value='adoration'/\u003e\n        \u003c/enum-item\u003e\n```\n```\n   \u003cenum-type type-name='request_type'\u003e\n        \u003cenum-item name='Job_Scarcity' value='25'/\u003e\n        \u003cenum-item name='Work_Allocation' value='26'/\u003e\n        \u003cenum-item name='Weapon_Production' value='27'/\u003e\n        \u003cenum-item name='Yelling_At_Official' value='28'/\u003e\n        \u003cenum-item name='Crying_At_Official' value='29'/\u003e\n        \u003cenum-item name='Petitioning_For_Citizenship' value='48'/\u003e\n   \u003c/enum-type\u003e\n       \n    \u003cenum-type type-name='haunt_type'\u003e  --  May be defined elsewhere\n        \u003cenum-item name='Haunted'/\u003e\n        \u003cenum-item name='Tormented'/\u003e\n        \u003cenum-item name='Possessed'/\u003e\n        \u003cenum-item name='Tortured'/\u003e\n   \u003c/enum-type\u003e\n   \n    \u003cenum-type type-name='official_room_type'\u003e  --  May be defined elsewhere\n        \u003cenum-item name='Office'/\u003e\n        \u003cenum-item name='Bedroom'/\u003e\n        \u003cenum-item name='Dining_Room'/\u003e\n        \u003cenum-item name='Tomb'/\u003e\n   \u003c/enum-type\u003e\n   \n    \u003cenum-type type-name='unit_thought_type'\u003e\n        \u003cenum-attr name='caption'/\u003e\n        \u003cenum-attr name='extended_caption'/\u003e\n        \u003cenum-attr name='xml_caption'/\u003e\n        \u003ccomment\u003e\n            caption: The text as displayed by DF.\n            extended_caption: The caption text modified to display the information\n              that exists for the thought, but isn't displayed normally. It may be\n              displayed by DF as the primary thought, and it may be entirely hidden.\n              This attribute is not present if it would be identical to caption.\n              \n            Tokens used in the captions:\n            - [he]: -\u003e he/she/it depending on gender \n            - [his]: -\u003e his/her/its depending on gender\n            - [him]: -\u003e him/her/it depending on gender\n            - [subthought]: The contents of the subthought field is used to derive this.\n            - [severity]: The contents of the severity field is used to derive this.\n            - [subthought_severity]: The contents of both the subthought and the severity\n                fields are used to jointy derive this.\n            The subthought and severity fields are the corresponding fields in the type\n            df.unit_personality.emotions [*] anonymous type.\n        \u003c/comment\u003e\n\n        \u003cenum-item name='None' value='-1'/\u003e\n\n        \u003cenum-item name='Conflict'\u003e\n            \u003citem-attr name='caption' value='while in conflict'/\u003e\n            \u003citem-attr name='xml_caption' value='conflict'/\u003e\n        \u003c/enum-item\u003e\n        \u003cenum-item name='Trauma'\u003e\n            \u003citem-attr name='caption' value='after experiencing trauma'/\u003e\n            \u003citem-attr name='xml_caption' value='death and injury'/\u003e\n        \u003c/enum-item\u003e\n        \u003cenum-item name='WitnessDeath'\u003e\n            \u003citem-attr name='caption' value='after seeing [subthought] die'/\u003e\n            \u003ccomment\u003e\n                subthought: id of df.global.world.incident.all entry\n                  Used as: incident = df.incident.find (subthought)\n                    incident.victim_race refers to the raws creature id,\n                    incident.victim_hf.hfid refers to the hf to derive its name\n                      if the victim is a hf.\n            \u003c/comment\u003e\n            \u003citem-attr name='xml_caption' value='witnessed death in incident'/\u003e\n        \u003c/enum-item\u003e\n        \u003cenum-item name='UnexpectedDeath'\u003e\n            \u003citem-attr name='caption' value='at the unexpected death of somebody'/\u003e  --  Is this correct, or is it really extended_caption here as well?\n            \u003citem-attr name='extended_caption' value='at the unexpected death of [subthought]'/\u003e\n            \u003ccomment\u003e\n                subthought: hf id\n                  Used as: Derive name from referenced hf.\n            \u003c/comment\u003e\n            \u003citem-attr name='xml_caption' value='hf died unexpectedly'/\u003e\n        \u003c/enum-item\u003e\n```\nPutting further waste of effort on hold until a decision is made. This is why I wanted a discussion *before* starting.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526295565,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODc3ODMwNQ==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388778305"},"message":"A possible, but still very ugly, way of dealing with the issue of the anonymous \"emotions\" element type's subthought/severity overloading would be to create a struct called e.g. thought_parameters. This struct would then replace the subthought/severity element pair in the anonymous type.\nThe thought_parameters struct would be an incredibly ugly union of single fields, one for each thought enum value, each of which would refer to a struct with two element, one for subthought and one for severity, but with the elements having (somewhat) descriptive names and being of appropriate types. Unused parameters would be defined with unnamed placeholder fields to ensure all of these types get the same size (and the second element ending up in the correct place). There is room for these lowest level structs to be merged into a smaller number than the number of unit_thought_type elements: incident parameters are used in several cases and can be shared for example, and all the cases where no parameter is used can make use of the same \"no parameters\" version.\nYou'd end up with extra levels of referencing with this scheme, but the horror of the massive union overload can be kept slightly away from the data type itself.","files":null},{"type":3,"author":{"id":"dc07f1dff8eee6d97a060efd0e58b122b9009d24"},"timestamp":1526315464,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM4ODg3OTk2Mg==","github-url":"https://github.com/DFHack/df-structures/issues/239#issuecomment-388879962"},"message":"And some extra pebbles thrown into the mix: The current unit_thought_type captions don't work properly when thoughts are remembered. Some work fine, but those starting with \"after\" drop that word when remembered, and those starting with \"while\" don't make sense if used as is when remembered. I haven't seen those, but suspect they may transform \"while\" into \"being\" or something similar. As far as I can tell there are 3 different wordings for memories (\"remembering\", \"reliving\", and \"dwelling upon\") with the one used being tied to the emotion.\nThe starts I've found being gobbled up when remembered are:\n-- while in\n-- after\n-- at\n-- when\n-- upon\n-- as [he] was caught up in\n-- near\n-- to be\n-- to have\n-- during\n-- by\n-- due to\nThe way I'd want to handle those in captions is by surrounding the part that may be removed in curly braces, e.g.: \"{after }seeing [subthought] die\"\nDoesn't quite work, as there's sometimes a replacement for a remembered thought. Thus, I'd use:\n\"{to have |having }[his] punishment reduced\" for PunishmentReduced, and no vertical bar if the replacement is empty, so the WitnessDeath example above would still look the same.","files":null}]}