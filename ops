{"version":1,"ops":[{"type":3,"author":{"id":"1daa046529992870662babb8e45eb2abbae215fb"},"timestamp":1481195677,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NTcxNjE4OQ==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-265716189"},"message":"Is this still an issue with new msvc? https://msdn.microsoft.com/en-us/library/hh567368.aspx this indicates that it should be okay with it.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1481203958,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NTc0MDIxNA==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-265740214"},"message":"And according to https://gcc.gnu.org/projects/cxx-status.html#cxx11 it should work in GCC \u003e= 4.6. There was some discussion of dropping support for 4.5 in favor of some other C++11 features (range-based for, etc.), so if this does work with 4.6, that could be another reason to move away from 4.5.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1481224747,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NTgyODk0Nw==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-265828947"},"message":"@warmist I just checked and this does not compile with GCC 4.8:\n```cpp\nstruct A {\n    A (int x=0) : x(x) {}\n    int x;\n};\n\nunion U {\n    A a;\n    int i;\n};\n\nU u;\n```\n\n`error: union member 'U::a' with non-trivial 'A::A(int)'`\n\n@dscorbett I don't care too much about removing the constructor, since it's possible to do the same thing by just setting `whole_` after constructing the union. I'm not sure if removing it would break something in the Lua API, though. Have you tried compiling with the bitfield constructors removed?","files":null},{"type":3,"author":{"id":"25c4158f5dcc139ae07acba5a747e2de0c904e43"},"timestamp":1481301301,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjA1ODU3MA==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266058570"},"message":"Once I removed them from a few plugins, compiling without the bitfield constructors completed without an error message. I can make a pull request, but it will be untested: the dfhack script has a “wrong architecture” error, even without this change.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1481301495,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjA1OTM1NA==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266059354"},"message":"What platform?\n\nAlso, good to know. I'd be happy to merge that if you make a PR (and I can revert 22819e2).","files":null},{"type":3,"author":{"id":"25c4158f5dcc139ae07acba5a747e2de0c904e43"},"timestamp":1481306358,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjA3OTA1MA==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266079050"},"message":"I am using OS X 10.11.5 with gcc 4.8. The error message is:\n```\ndyld: could not load inserted library './hack/libdfhack.dylib' because no suitable image found.  Did find:\n\t./hack/libdfhack.dylib: mach-o, but wrong architecture\n\n./dfhack: line 15: 48704 Trace/BPT trap: 5       DYLD_INSERT_LIBRARIES=./hack/libdfhack.dylib ./dwarfort.exe \"$@\"\n\n```\nThis message from the make log looks relevant:\n```\n[ 55%] Linking CXX shared library libdfhack.dylib\nld: warning: ignoring file /Users/dcorbett/df/df_osx/libs/libstdc++.6.dylib, file was built for x86_64 which is not the architecture being linked (i386): /Users/dcorbett/df/df_osx/libs/libstdc++.6.dylib\n```","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1481310809,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjA5Njc1Ng==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266096756"},"message":"Looks like you're building a 32-bit DFHack for 64-bit DF, or possibly the other way around (but I think the first is more likely). Try passing -DDFHACK_BUILD_ARCH=64 to cmake if you haven't.","files":null},{"type":3,"author":{"id":"25c4158f5dcc139ae07acba5a747e2de0c904e43"},"timestamp":1481313735,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjEwOTI3NQ==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266109275"},"message":"That worked. Thanks! I can confirm that with my changes getting and setting a bitfield’s bits in Lua still works, both individually and using a table.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1481313948,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NjExMDAyNw==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-266110027"},"message":"I confirmed that the default constructor zero-initializes the bitfield (and http://stackoverflow.com/questions/321351 agrees). Looks good to me.\n\nEdit: got this to break with dynamically-allocated bitfields: dfhack/dfhack#1047","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1482879182,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTM5NDI4Mg==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-269394282"},"message":"Just so you know, I'm going to revert the change in #171. I was planning on leaving it and fixing bitfield initialization elsewhere myself, but there turned out to be a *lot* of cases of default-initialized bitfields that suddenly started breaking in 0.43.05-alpha3. Also, I discovered that putting things with non-trivial constructors in unions just removes the union's default constructor - you can define your own (empty) one that works. For example, with my example above, adding a U() constructor makes it compile:\n```cpp\nstruct A {\n    A (int x=0) : x(x) {}\n    int x;\n};\n\nunion U {\n    A a;\n    int i;\n    U(){} // ADDED\n};\n\nU u;\n```\nAdding empty constructors for unions shouldn't be too hard.","files":null},{"type":3,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1482899385,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTQyMzk3OQ==","github-url":"https://github.com/DFHack/df-structures/issues/169#issuecomment-269423979"},"message":"Looks like that compiles, and `knowledge_scholar_category_flag` can now be used more sensibly in C++ and Lua. (Note that the flags in unions like that one are not initialized, although flags in structures are reliably initialized now.)","files":null},{"type":4,"author":{"id":"7c3935464acdaaae9d6fcb27abcbbe21ec75027f"},"timestamp":1482899385,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50OTA2MjEyOTYz"},"status":2}]}