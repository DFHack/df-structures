<data-definition>
    <struct-type type-name='large_integer' is-union='true'>
        <compound>
            <long name='low_part'/>
            <long name='high_part'/>
        </compound>
        <compound name='u'>
            <long name='low_part'/>
            <long name='high_part'/>
        </compound>
        <int64_t name='quad_part'/>
    </struct-type>

    <struct-type type-name='musicsoundst'>
        <int32_t name='soft_channel_number'/>
        <int32_t name='song' init-value='-1' refers-to='$$._parent.mod[$]'/>
        <bool name='music_active'/>
        <bool name='sound_priority'/>
        <int32_t name='sound_playing'/>
        <bool name='on'/>
        <pointer name='fmod_system'/>
        <pointer name='fmod_master_channel_group'/>
        <static-array name='mod' count='1000' type-name='fmod_sound' comment='songs'/>
        <static-array name='samp' count='1000' type-name='fmod_sound' comment='sound effects'/>
        <enum name='linux_sound_system'>
            <enum-item name='ALSA'/>
            <enum-item name='OSS'/>
            <enum-item name='ESD'/>
        </enum>
    </struct-type>

    <struct-type type-name='fmod_sound' original-name='fmodSound'>
        <pointer name='sound'/>
        <pointer name='channel'/>
    </struct-type>

    <enum-type type-name='curses_color' base-type='uint8_t'>
        Using the color names without "dark" or "light", favoring primaries.
        <enum-item name='Black'/>
        <enum-item name='Blue'/>
        <enum-item name='Green'/>
        <enum-item name='Cyan'/>
        <enum-item name='Red'/>
        <enum-item name='Magenta'/>
        <enum-item name='Yellow'/>
        <enum-item name='White'/>
    </enum-type>

    <bitfield-type type-name='cmv_attribute' base-type='uint8_t'>
        <flag-bit name='fg' count='3' type-name='curses_color'/>
        <flag-bit name='bg' count='3' type-name='curses_color'/>
        <flag-bit name='bright'/>
    </bitfield-type>

    <struct-type type-name='graphic' original-name='graphicst'>
        <long name='screenx'/>
        <long name='screeny'/>
        <enum name='screenf' type-name='curses_color'/>
        <enum name='screenb' type-name='curses_color'/>
        <bool name='screenbright'/>

        <pointer type-name='uint8_t' name='screen' is-array='true'/>
        <pointer type-name='long' name='screentexpos' is-array='true'/>
        <pointer type-name='int8_t' name='screentexpos_addcolor' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_grayscale' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cf' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cbr' is-array='true'/>

        <static-array type-name='long' name='clipx' count='2'/>
        <static-array type-name='long' name='clipy' count='2'/>
        <static-array type-name='long' name='tex_pos' count='1'/>

        <long name='rect_id'/>

        <static-array type-name='large_integer' name='print_time' count='100'/>
        <long name='print_index'/>
        <int8_t name='display_frames'/>

        <int16_t name='force_full_display_count'/>

        <int8_t name='original_rect'/>

        <int32_t name='dimx'/>
        <int32_t name='dimy'/>

        <int32_t name='mouse_x'/>
        <int32_t name='mouse_y'/>

        <pointer type-name='uint8_t' name='screen_limit'/>
    </struct-type>

    <class-type type-name='renderer'>
        <pointer type-name='uint8_t' name='screen' is-array='true'/>
        <pointer type-name='long' name='screentexpos' is-array='true'/>
        <pointer type-name='int8_t' name='screentexpos_addcolor' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_grayscale' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cf' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cbr' is-array='true'/>

        <pointer type-name='uint8_t' name='screen_old' is-array='true'/>
        <pointer type-name='long' name='screentexpos_old' is-array='true'/>
        <pointer type-name='int8_t' name='screentexpos_addcolor_old' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_grayscale_old' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cf_old' is-array='true'/>
        <pointer type-name='uint8_t' name='screentexpos_cbr_old' is-array='true'/>

        <virtual-methods>
            <vmethod name='update_tile'> <int32_t name='x'/> <int32_t name='y'/> </vmethod>
            <vmethod name='update_all'/>
            <vmethod name='render'/>
            <vmethod name='set_fullscreen'/>
            <vmethod name='zoom'>
                <enum base-type='int32_t' type-name='zoom_commands'/>
            </vmethod>

            <vmethod name='resize'> <int32_t name='w'/> <int32_t name='h'/> </vmethod>
            <vmethod name='grid_resize'> <int32_t name='w'/> <int32_t name='h'/> </vmethod>
            <vmethod is-destructor='true'/>
            <vmethod ret-type='bool' name='get_mouse_coords'>
                <pointer type-name='int32_t' name='x'/>
                <pointer type-name='int32_t' name='y'/>
            </vmethod>
            <vmethod ret-type='bool' name='uses_opengl'/>
        </virtual-methods>
    </class-type>

    <enum-type type-name='zoom_commands'>
        <enum-item name='zoom_in'/>
        <enum-item name='zoom_out'/>
        <enum-item name='zoom_reset'/>
        <enum-item name='zoom_fullscreen'/>
        <enum-item name='zoom_resetgrid'/>
    </enum-type>

    <class-type type-name='enabler' original-name='enablerst' custom-methods='true'>
        <extra-include filename='Hooks.h'/>
        <bool name='fullscreen'/>

        <stl-deque name='overridden_grid_sizes'>
            <int32_t name='x'/>
            <int32_t name='y'/>
        </stl-deque>

        <pointer name='renderer' type-name='renderer'/>

        <int32_t name='calculated_fps'/>
        <int32_t name='calculated_gfps'/>
        <stl-deque name='frame_timings' type-name='int32_t'/>
        <stl-deque name='gframe_timings' type-name='int32_t'/>
        <int32_t name='frame_sum'/>
        <int32_t name='gframe_sum'/>
        <int32_t name='frame_last'/>
        <int32_t name='gframe_last'/>
        <s-float name='fps'/>
        <s-float name='gfps'/>
        <s-float name='fps_per_gfps'/>
        <uint32_t name='last_tick'/>
        <s-float name='outstanding_frames'/>
        <s-float name='outstanding_gframes'/>

        <uint32_t name='async_frames'/>
        <bool name='async_paused'/>

        <compound name='async_tobox'>
            <pointer name='sem'/>
            <stl-deque name='queue'>
                <enum name='cmd'>
                    <enum-item name='pause'/>
                    <enum-item name='start'/>
                    <enum-item name='render'/>
                    <enum-item name='inc'/>
                    <enum-item name='set_fps'/>
                </enum>
                <int32_t name='val'/>
            </stl-deque>
            <pointer name='sem_fill'/>
        </compound>

        <compound name='async_frombox'>
            <pointer name='sem'/>
            <stl-deque name='queue'>
                <enum name='msg'>
                    <enum-item name='quit'/>
                    <enum-item name='complete'/>
                    <enum-item name='set_fps'/>
                    <enum-item name='set_gfps'/>
                    <enum-item name='push_resize'/>
                    <enum-item name='pop_resize'/>
                    <enum-item name='reset_textures'/>
                </enum>
                <compound is-union='true'>
                    <int32_t name='fps'/>
                    <compound>
                        <int32_t name='x'/>
                        <int32_t name='y'/>
                    </compound>
                </compound>
            </stl-deque>
            <pointer name='sem_fill'/>
        </compound>

        <compound name='async_zoom'>
            <pointer name='sem'/>
            <stl-deque name='queue'>
                <enum base-type='int32_t' type-name='zoom_commands'/>
            </stl-deque>
            <pointer name='sem_fill'/>
        </compound>

        <pointer name='async_fromcomplete'/>

        <uint32_t name='renderer_threadid'/>

        <stl-string name='command_line'/>
        <static-array name='ccolor' count='16'>
            <static-array count='3' type-name='s-float'/>
        </static-array>

        <bitfield name='flag' base-type='long'>
            <flag-bit name='render'/>
            <flag-bit name='maxfps'/>
        </bitfield>

        <int8_t name='mouse_lbut'/>
        <int8_t name='mouse_rbut'/>
        <int8_t name='mouse_lbut_down'/>
        <int8_t name='mouse_rbut_down'/>
        <int8_t name='mouse_lbut_lift'/>
        <int8_t name='mouse_rbut_lift'/>
        <int8_t name='tracking_on'/>

        <compound name='textures'>
            <stl-vector type-name='pointer' name='raws'/>
            <bool name='uploaded'/>
            <uint32_t name='gl_catalog'/>
            <pointer name='gl_texpos'/>
        </compound>

        <int32_t name='sync'/>

        <compound name='text_system'>
            <stl-vector name='file_info'>
                <pointer>
                    <long name='index'/>
                    <stl-string name='filename'/>
                    <int8_t name='file_token'/>
                    <long name='number'/>
                </pointer>
            </stl-vector>
        </compound>

        <compound name='simticks'>
            <pointer name='sem'/>
            <int32_t name='value'/>
        </compound>
        <compound name='gputicks'>
            <pointer name='sem'/>
            <int32_t name='value'/>
        </compound>

        <uint32_t name='clock'/>

        <virtual-methods>
            <vmethod ret-type='stl-string' name='GetKeyDisplay'>
                <enum type-name='interface_key' base-type='int32_t'/>
            </vmethod>
        </virtual-methods>

        <custom-methods>
            <cmethod name='zoom_display'/>
        </custom-methods>
    </class-type>

    <enum-type type-name='justification' base-type='uint8_t' comment='from libgraphics'>
        <enum-item name='justify_left'/>
        <enum-item name='justify_center'/>
        <enum-item name='justify_right'/>
        <enum-item name='justify_cont'/>
        <enum-item name='not_truetype'/>
    </enum-type>
</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
