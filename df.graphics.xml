<data-definition>
    <struct-type type-name='large_integer' is-union='true'>
        <compound>
            <long name='low_part'/>
            <long name='high_part'/>
        </compound>
        <compound name='u'>
            <long name='low_part'/>
            <long name='high_part'/>
        </compound>
        <int64_t name='quad_part'/>
    </struct-type>

    <enum-type type-name='curses_color' base-type='uint8_t'>
        Using the color names without "dark" or "light", favoring primaries.
        <enum-item name='Black'/>
        <enum-item name='Blue'/>
        <enum-item name='Green'/>
        <enum-item name='Cyan'/>
        <enum-item name='Red'/>
        <enum-item name='Magenta'/>
        <enum-item name='Yellow'/>
        <enum-item name='White'/>
    </enum-type>

    <bitfield-type type-name='cmv_attribute' base-type='uint8_t'>
        <flag-bit name='fg' count='3' type-name='curses_color'/>
        <flag-bit name='bg' count='3' type-name='curses_color'/>
        <flag-bit name='bright'/>
    </bitfield-type>

    <class-type type-name='renderer_2d_base' inherits-from='renderer'>
        <pointer name='window' comment='SDL_Window*'/>
        <pointer name='sdl_renderer' comment='SDL_Renderer*'/>
        <pointer name='screen_tex' comment='SDL_Texture*'/>
        <stl-unordered-map name='tile_cache' comment='unordered_map&lt;texture_fullid, SDL_Texture*\&gt;'/>

        <int32_t name='dispx'/>
        <int32_t name='dispy'/>
        <int32_t name='dimx'/>
        <int32_t name='dimy'/>

        <int32_t name='dispx_z'/>
        <int32_t name='dispy_z'/>
        <int32_t name='origin_x'/>
        <int32_t name='origin_y'/>

        <int32_t name='cur_w'/>
        <int32_t name='cur_h'/>

        <bool name='use_viewport_zoom'/>
        <int32_t name='viewport_zoom_factor'/>

        <stl-vector name='textures_to_destroy' comment='svector&lt;texture_fullid&gt;'/>
        <padding size='24' name='ttfs_to_render'
            comment='std::list&lt;pair&lt;SDL_Surface*, SDL_Rect&gt;&gt;'/>

        <int32_t name='zoom_steps'/>
        <int32_t name='forced_steps'/>
        <int32_t name='natural_w'/>
        <int32_t name='natural_h'/>

        <virtual-methods>
            <vmethod ret-type='bool' name='init_video'><int32_t name='w'/><int32_t name='h'/></vmethod>
        </virtual-methods>
    </class-type>

    <class-type type-name='renderer_2d' inherits-from='renderer_2d_base'/>

    -- texture_handler.h
    <struct-type type-name='tile_pagest' key-field='token'>
        <stl-string name='token'/>
        <stl-string name='graphics_dir'/>
        <stl-string name='filename'/>

        <int16_t name='tile_dim_x'/>
        <int16_t name='tile_dim_y'/>
        <int16_t name='page_dim_x'/>
        <int16_t name='page_dim_y'/>

        <stl-vector name='texpos' type-name='long'/>
        <stl-vector name='datapos' type-name='long'/>
        <stl-vector name='texpos_gs' type-name='long'/>
        <stl-vector name='datapos_gs' type-name='long'/>

        <bool name='loaded'/>
    </struct-type>

    <struct-type type-name='palette_rowst'>
        <pointer type-name='uint8_t' name='row' is-array='true'/>
    </struct-type>

    <struct-type type-name='palette_pagest' key-field='token'>
        <stl-string name='token'/>
        <stl-string name='graphics_dir'/>
        <stl-string name='filename'/>

        <int32_t name='default_row'/>
        <stl-vector name='color_token' pointer-type='stl-string'/>
        <stl-vector name='color_row' type-name='int32_t'/>
        <stl-vector pointer-type='palette_rowst' name='row'/>
        <int32_t name='row_width'/>
    </struct-type>

    <struct-type type-name='texture_handlerst'>
        <stl-vector name='page' pointer-type='tile_pagest'/>
        <stl-vector name='palette' pointer-type='palette_pagest'/>
    </struct-type>
</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
